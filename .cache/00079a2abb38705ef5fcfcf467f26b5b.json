{"dependencies":[{"name":"/Users/summertime/Documents/GitHub/tfjs_CNN_example2/package.json","includedInParent":true,"mtime":1527740925000},{"name":"/Users/summertime/Documents/GitHub/tfjs_CNN_example2/.babelrc","includedInParent":true,"mtime":1527740925000},{"name":"/Users/summertime/Documents/GitHub/tfjs_CNN_example2/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":1520897090000},{"name":"../../channel","loc":{"line":21,"column":24}},{"name":"../../log","loc":{"line":22,"column":18}},{"name":"../../scale","loc":{"line":23,"column":22}},{"name":"../../vega.schema","loc":{"line":24,"column":28}},{"name":"../scale/domain","loc":{"line":25,"column":23}},{"name":"./dataflow","loc":{"line":26,"column":25}}],"generated":{"js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar channel_1 = require(\"../../channel\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar vega_schema_1 = require(\"../../vega.schema\");\nvar domain_1 = require(\"../scale/domain\");\nvar dataflow_1 = require(\"./dataflow\");\n/**\n * A node that helps us track what fields we are faceting by.\n */\nvar FacetNode = /** @class */ (function (_super) {\n    __extends(FacetNode, _super);\n    /**\n     * @param model The facet model.\n     * @param name The name that this facet source will have.\n     * @param data The source data for this facet data.\n     */\n    function FacetNode(parent, model, name, data) {\n        var _this = _super.call(this, parent) || this;\n        _this.model = model;\n        _this.name = name;\n        _this.data = data;\n        if (model.facet.column) {\n            _this.columnFields = [model.vgField(channel_1.COLUMN)];\n            _this.columnName = model.getName('column_domain');\n            if (model.fieldDef(channel_1.COLUMN).bin) {\n                _this.columnFields.push(model.vgField(channel_1.COLUMN, { binSuffix: 'end' }));\n            }\n        }\n        if (model.facet.row) {\n            _this.rowFields = [model.vgField(channel_1.ROW)];\n            _this.rowName = model.getName('row_domain');\n            if (model.fieldDef(channel_1.ROW).bin) {\n                _this.rowFields.push(model.vgField(channel_1.ROW, { binSuffix: 'end' }));\n            }\n        }\n        _this.childModel = model.child;\n        return _this;\n    }\n    Object.defineProperty(FacetNode.prototype, \"fields\", {\n        get: function () {\n            var fields = [];\n            if (this.columnFields) {\n                fields = fields.concat(this.columnFields);\n            }\n            if (this.rowFields) {\n                fields = fields.concat(this.rowFields);\n            }\n            return fields;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * The name to reference this source is its name.\n     */\n    FacetNode.prototype.getSource = function () {\n        return this.name;\n    };\n    FacetNode.prototype.getChildIndependentFieldsWithStep = function () {\n        var childIndependentFieldsWithStep = {};\n        for (var _i = 0, _a = ['x', 'y']; _i < _a.length; _i++) {\n            var channel = _a[_i];\n            var childScaleComponent = this.childModel.component.scales[channel];\n            if (childScaleComponent && !childScaleComponent.merged) {\n                var type = childScaleComponent.get('type');\n                var range = childScaleComponent.get('range');\n                if (scale_1.hasDiscreteDomain(type) && vega_schema_1.isVgRangeStep(range)) {\n                    var domain = domain_1.assembleDomain(this.childModel, channel);\n                    var field = domain_1.getFieldFromDomain(domain);\n                    if (field) {\n                        childIndependentFieldsWithStep[channel] = field;\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                    }\n                }\n            }\n        }\n        return childIndependentFieldsWithStep;\n    };\n    FacetNode.prototype.assembleRowColumnData = function (channel, crossedDataName, childIndependentFieldsWithStep) {\n        var aggregateChildField = {};\n        var childChannel = channel === 'row' ? 'y' : 'x';\n        if (childIndependentFieldsWithStep[childChannel]) {\n            if (crossedDataName) {\n                aggregateChildField = {\n                    // If there is a crossed data, calculate max\n                    fields: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]],\n                    ops: ['max'],\n                    // Although it is technically a max, just name it distinct so it's easier to refer to it\n                    as: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]]\n                };\n            }\n            else {\n                aggregateChildField = {\n                    // If there is no crossed data, just calculate distinct\n                    fields: [childIndependentFieldsWithStep[childChannel]],\n                    ops: ['distinct']\n                };\n            }\n        }\n        return {\n            name: channel === 'row' ? this.rowName : this.columnName,\n            // Use data from the crossed one if it exist\n            source: crossedDataName || this.data,\n            transform: [__assign({ type: 'aggregate', groupby: channel === 'row' ? this.rowFields : this.columnFields }, aggregateChildField)]\n        };\n    };\n    FacetNode.prototype.assemble = function () {\n        var data = [];\n        var crossedDataName = null;\n        var childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n        if (this.columnName && this.rowName && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n            // Need to create a cross dataset to correctly calculate cardinality\n            crossedDataName = \"cross_\" + this.columnName + \"_\" + this.rowName;\n            var fields = [].concat(childIndependentFieldsWithStep.x ? [childIndependentFieldsWithStep.x] : [], childIndependentFieldsWithStep.y ? [childIndependentFieldsWithStep.y] : []);\n            var ops = fields.map(function () { return 'distinct'; });\n            data.push({\n                name: crossedDataName,\n                source: this.data,\n                transform: [{\n                        type: 'aggregate',\n                        groupby: this.columnFields.concat(this.rowFields),\n                        fields: fields,\n                        ops: ops\n                    }]\n            });\n        }\n        if (this.columnName) {\n            data.push(this.assembleRowColumnData('column', crossedDataName, childIndependentFieldsWithStep));\n        }\n        if (this.rowName) {\n            data.push(this.assembleRowColumnData('row', crossedDataName, childIndependentFieldsWithStep));\n        }\n        return data;\n    };\n    return FacetNode;\n}(dataflow_1.DataFlowNode));\nexports.FacetNode = FacetNode;\n//# sourceMappingURL=data:application/json;base64,","map":{"mappings":[{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/data/facet.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}}],"sources":{"node_modules/vega-lite/build/src/compile/data/facet.js":"\"use strict\";\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar channel_1 = require(\"../../channel\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar vega_schema_1 = require(\"../../vega.schema\");\nvar domain_1 = require(\"../scale/domain\");\nvar dataflow_1 = require(\"./dataflow\");\n/**\n * A node that helps us track what fields we are faceting by.\n */\nvar FacetNode = /** @class */ (function (_super) {\n    __extends(FacetNode, _super);\n    /**\n     * @param model The facet model.\n     * @param name The name that this facet source will have.\n     * @param data The source data for this facet data.\n     */\n    function FacetNode(parent, model, name, data) {\n        var _this = _super.call(this, parent) || this;\n        _this.model = model;\n        _this.name = name;\n        _this.data = data;\n        if (model.facet.column) {\n            _this.columnFields = [model.vgField(channel_1.COLUMN)];\n            _this.columnName = model.getName('column_domain');\n            if (model.fieldDef(channel_1.COLUMN).bin) {\n                _this.columnFields.push(model.vgField(channel_1.COLUMN, { binSuffix: 'end' }));\n            }\n        }\n        if (model.facet.row) {\n            _this.rowFields = [model.vgField(channel_1.ROW)];\n            _this.rowName = model.getName('row_domain');\n            if (model.fieldDef(channel_1.ROW).bin) {\n                _this.rowFields.push(model.vgField(channel_1.ROW, { binSuffix: 'end' }));\n            }\n        }\n        _this.childModel = model.child;\n        return _this;\n    }\n    Object.defineProperty(FacetNode.prototype, \"fields\", {\n        get: function () {\n            var fields = [];\n            if (this.columnFields) {\n                fields = fields.concat(this.columnFields);\n            }\n            if (this.rowFields) {\n                fields = fields.concat(this.rowFields);\n            }\n            return fields;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * The name to reference this source is its name.\n     */\n    FacetNode.prototype.getSource = function () {\n        return this.name;\n    };\n    FacetNode.prototype.getChildIndependentFieldsWithStep = function () {\n        var childIndependentFieldsWithStep = {};\n        for (var _i = 0, _a = ['x', 'y']; _i < _a.length; _i++) {\n            var channel = _a[_i];\n            var childScaleComponent = this.childModel.component.scales[channel];\n            if (childScaleComponent && !childScaleComponent.merged) {\n                var type = childScaleComponent.get('type');\n                var range = childScaleComponent.get('range');\n                if (scale_1.hasDiscreteDomain(type) && vega_schema_1.isVgRangeStep(range)) {\n                    var domain = domain_1.assembleDomain(this.childModel, channel);\n                    var field = domain_1.getFieldFromDomain(domain);\n                    if (field) {\n                        childIndependentFieldsWithStep[channel] = field;\n                    }\n                    else {\n                        log.warn('Unknown field for ${channel}.  Cannot calculate view size.');\n                    }\n                }\n            }\n        }\n        return childIndependentFieldsWithStep;\n    };\n    FacetNode.prototype.assembleRowColumnData = function (channel, crossedDataName, childIndependentFieldsWithStep) {\n        var aggregateChildField = {};\n        var childChannel = channel === 'row' ? 'y' : 'x';\n        if (childIndependentFieldsWithStep[childChannel]) {\n            if (crossedDataName) {\n                aggregateChildField = {\n                    // If there is a crossed data, calculate max\n                    fields: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]],\n                    ops: ['max'],\n                    // Although it is technically a max, just name it distinct so it's easier to refer to it\n                    as: [\"distinct_\" + childIndependentFieldsWithStep[childChannel]]\n                };\n            }\n            else {\n                aggregateChildField = {\n                    // If there is no crossed data, just calculate distinct\n                    fields: [childIndependentFieldsWithStep[childChannel]],\n                    ops: ['distinct']\n                };\n            }\n        }\n        return {\n            name: channel === 'row' ? this.rowName : this.columnName,\n            // Use data from the crossed one if it exist\n            source: crossedDataName || this.data,\n            transform: [__assign({ type: 'aggregate', groupby: channel === 'row' ? this.rowFields : this.columnFields }, aggregateChildField)]\n        };\n    };\n    FacetNode.prototype.assemble = function () {\n        var data = [];\n        var crossedDataName = null;\n        var childIndependentFieldsWithStep = this.getChildIndependentFieldsWithStep();\n        if (this.columnName && this.rowName && (childIndependentFieldsWithStep.x || childIndependentFieldsWithStep.y)) {\n            // Need to create a cross dataset to correctly calculate cardinality\n            crossedDataName = \"cross_\" + this.columnName + \"_\" + this.rowName;\n            var fields = [].concat(childIndependentFieldsWithStep.x ? [childIndependentFieldsWithStep.x] : [], childIndependentFieldsWithStep.y ? [childIndependentFieldsWithStep.y] : []);\n            var ops = fields.map(function () { return 'distinct'; });\n            data.push({\n                name: crossedDataName,\n                source: this.data,\n                transform: [{\n                        type: 'aggregate',\n                        groupby: this.columnFields.concat(this.rowFields),\n                        fields: fields,\n                        ops: ops\n                    }]\n            });\n        }\n        if (this.columnName) {\n            data.push(this.assembleRowColumnData('column', crossedDataName, childIndependentFieldsWithStep));\n        }\n        if (this.rowName) {\n            data.push(this.assembleRowColumnData('row', crossedDataName, childIndependentFieldsWithStep));\n        }\n        return data;\n    };\n    return FacetNode;\n}(dataflow_1.DataFlowNode));\nexports.FacetNode = FacetNode;\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFjZXQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9kYXRhL2ZhY2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQ0EseUNBQXdEO0FBQ3hELCtCQUFpQztBQUNqQyxxQ0FBOEM7QUFDOUMsaURBQThFO0FBRzlFLDBDQUFtRTtBQUNuRSx1Q0FBd0M7QUFPeEM7O0dBRUc7QUFDSDtJQUErQiw2QkFBWTtJQVN6Qzs7OztPQUlHO0lBQ0gsbUJBQW1CLE1BQW9CLEVBQWtCLEtBQWlCLEVBQWtCLElBQVksRUFBUyxJQUFZO1FBQTdILFlBQ0Usa0JBQU0sTUFBTSxDQUFDLFNBbUJkO1FBcEJ3RCxXQUFLLEdBQUwsS0FBSyxDQUFZO1FBQWtCLFVBQUksR0FBSixJQUFJLENBQVE7UUFBUyxVQUFJLEdBQUosSUFBSSxDQUFRO1FBRzNILEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztZQUN2QixLQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBTSxDQUFDLENBQUMsQ0FBQztZQUM1QyxLQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDakQsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxnQkFBTSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztnQkFDL0IsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxnQkFBTSxFQUFFLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBQyxDQUFDLENBQUMsQ0FBQztZQUNwRSxDQUFDO1FBQ0gsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztZQUNwQixLQUFJLENBQUMs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QUFDLFFBQVEsRUFBRSxlQUFlLEVBQUUsOEJBQThCLENBQUMsQ0FBQyxDQUFDO1FBQ25HLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUUsZUFBZSxFQUFFLDhCQUE4QixDQUFDLENBQUMsQ0FBQztRQUNoRyxDQUFDO1FBRUQsTUFBTSxDQUFDLElBQUksQ0FBQztJQUNkLENBQUM7SUFDSCxnQkFBQztBQUFELENBQUMsQUFySkQsQ0FBK0IsdUJBQVksR0FxSjFDO0FBckpZLDhCQUFTIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZ2dyZWdhdGVPcH0gZnJvbSAndmVnYSc7XG5pbXBvcnQge0NPTFVNTiwgUk9XLCBTY2FsZUNoYW5uZWx9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0ICogYXMgbG9nIGZyb20gJy4uLy4uL2xvZyc7XG5pbXBvcnQge2hhc0Rpc2NyZXRlRG9tYWlufSBmcm9tICcuLi8uLi9zY2FsZSc7XG5pbXBvcnQge2lzVmdSYW5nZVN0ZXAsIFZnQWdncmVnYXRlVHJhbnNmb3JtLCBWZ0RhdGF9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7RmFjZXRNb2RlbH0gZnJvbSAnLi4vZmFjZXQnO1xuaW1wb3J0IHtNb2RlbH0gZnJvbSAnLi4vbW9kZWwnO1xuaW1wb3J0IHthc3NlbWJsZURvbWFpbiwgZ2V0RmllbGRGcm9tRG9tYWlufSBmcm9tICcuLi9zY2FsZS9kb21haW4nO1xuaW1wb3J0IHtEYXRhRmxvd05vZGV9IGZyb20gJy4vZGF0YWZsb3cnO1xuXG50eXBlIENoaWxkSW5kZXBlbmRlbnRGaWVsZHNXaXRoU3RlcCA9IHtcbiAgeD86IHN0cmluZyxcbiAgeT86IHN0cmluZ1xufTtcblxuLyoqXG4gKiBBIG5vZGUgdGhhdCBoZWxwcyB1cyB0cmFjayB3aGF0IGZpZWxkcyB3ZSBhcmUgZmFjZXRpbmcgYnkuXG4gKi9cbmV4cG9ydCBjbGFzcyBGYWNldE5vZGUgZXh0ZW5kcyBEYXRhRmxvd05vZGUge1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbHVtbkZpZWxkczogc3RyaW5nW107XG4gIHByaXZhdGUgcmVhZG9ubHkgY29sdW1uTmFtZTogc3RyaW5nO1xuXG4gIHByaXZhdGUgcmVhZG9ubHkgcm93RmllbGRzOiBzdHJpbmdbXTtcbiAgcHJpdmF0ZSByZWFkb25seSByb3dOYW1lOiBzdHJpbmc7XG5cbiAgcHJpdmF0ZSByZWFkb25seSBjaGlsZE1vZGVsOiBNb2RlbDtcblxuICAvKipcbiAgICogQHBhcmFtIG1vZGVsIFRoZSBmYWNldCBtb2RlbC5cbiAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgdGhhdCB0aGlzIGZhY2V0IHNvdXJjZSB3aWxsIGhhdmUuXG4gICAqIEBwYXJhbSBkYXRhIFRoZSBzb3VyY2UgZGF0YSBmb3IgdGhpcyBmYWNldCBkYXRhLlxuICAgKi9cbiAgcHVibGljIGNvbnN0cnVjdG9yKHBhcmVudDogRGF0YUZsb3dOb2RlLCBwdWJsaWMgcmVhZG9ubHkgbW9kZWw6IEZhY2V0TW9kZWwsIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmcsIHB1YmxpYyBkYXRhOiBzdHJpbmcpIHtcbiAgICBzdXBlcihwYXJlbnQpO1xuXG4gICAgaWYgKG1vZGVsLmZhY2V0LmNvbHVtbikge1xuICAgICAgdGhpcy5jb2x1bW5GaWVsZHMgPSBbbW9kZWwudmdGaWVsZChDT0xVTU4pXTtcbiAgICAgIHRoaXMuY29sdW1uTmFtZSA9IG1vZGVsLmdldE5hbWUoJ2NvbHVtbl9kb21haW4nKTtcbiAgICAgIGlmIChtb2RlbC5maWVsZERlZihDT0xVTU4pLmJpbikge1xuICAgICAgICB0aGlzLmNvbHVtbkZpZWxkcy5wdXNoKG1vZGVsLnZnRmllbGQoQ09MVU1OLCB7YmluU3VmZml4OiAnZW5kJ30pKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobW9kZWwuZmFjZXQucm93KSB7XG4gICAgICB0aGlzLnJvd0ZpZWxkcyA9IFttb2RlbC52Z0ZpZWxkKFJPVyldO1xuICAgICAgdGhpcy5yb3dOYW1lID0gbW9kZWwuZ2V0TmFtZSgncm93X2RvbWFpbicpO1xuICAgICAgaWYgKG1vZGVsLmZpZWxkRGVmKFJPVykuYmluKSB7XG4gICAgICAgIHRoaXMucm93RmllbGRzLnB1c2gobW9kZWwudmdGaWVsZChST1csIHtiaW5TdWZmaXg6ICdlbmQnfSkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuY2hpbGRNb2RlbCA9IG1vZGVsLmNoaWxkO1xuICB9XG5cbiAgZ2V0IGZpZWxkcygpIHtcbiAgICBsZXQgZmllbGRzOiBzdHJpbmdbXSA9IFtdO1xuICAgIGlmICh0aGlzLmNvbHVtbkZpZWxkcykge1xuICAgICAgZmllbGRzID0gZmllbGRzLmNvbmNhdCh0aGlzLmNvbHVtbkZpZWxkcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLnJvd0ZpZWxkcykge1xuICAgICAgZmllbGRzID0gZmllbGRzLmNvbmNhdCh0aGlzLnJvd0ZpZWxkcyk7XG4gICAgfVxuICAgIHJldHVybiBmaWVsZHM7XG4gIH1cblxuICAvKipcbiAgICogVGhlIG5hbWUgdG8gcmVmZXJlbmNlIHRoaXMgc291cmNlIGlzIGl0cyBuYW1lLlxuICAgKi9cbiAgcHVibGljIGdldFNvdXJjZSgpIHtcbiAgICByZXR1cm4gdGhpcy5uYW1lO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDaGlsZEluZGVwZW5kZW50RmllbGRzV2l0aFN0ZXAoKSB7XG4gICAgY29uc3QgY2hpbGRJbmRlcGVuZGVudEZpZWxkc1dpdGhTdGVwOiBDaGlsZEluZGVwZW5kZW50RmllbGRzV2l0aFN0ZXAgPSB7fTtcblxuICAgIGZvciAoY29uc3QgY2hhbm5lbCBvZiBbJ3gnLCAneSddIGFzIFNjYWxlQ2hhbm5lbFtdKSB7XG4gICAgICBjb25zdCBjaGlsZFNjYWxlQ29tcG9uZW50ID0gdGhpcy5jaGlsZE1vZGVsLmNvbXBvbmVudC5zY2FsZXNbY2hhbm5lbF07XG4gICAgICBpZiAoY2hpbGRTY2FsZUNvbXBvbmVudCAmJiAhY2hpbGRTY2FsZUNvbXBvbmVudC5tZXJnZWQpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IGNoaWxkU2NhbGVDb21wb25lbnQuZ2V0KCd0eXBlJyk7XG4gICAgICAgIGNvbnN0IHJhbmdlID0gY2hpbGRTY2FsZUNvbXBvbmVudC5nZXQoJ3JhbmdlJyk7XG5cbiAgICAgICAgaWYgKGhhc0Rpc2NyZXRlRG9tYWluKHR5cGUpICYmIGlzVmdSYW5nZVN0ZXAocmFuZ2UpKSB7XG4gICAgICAgICAgY29uc3QgZG9tYWluID0gYXNzZW1ibGVEb21haW4odGhpcy5jaGlsZE1vZGVsLCBjaGFubmVsKTtcbiAgICAgICAgICBjb25zdCBmaWVsZCA9IGdldEZpZWxkRnJvbURvbWFpbihkb21haW4pO1xuICAgICAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAgICAgY2hpbGRJbmRlcGVuZGVudEZpZWxkc1dpdGhTdGVwW2NoYW5uZWxdID0gZmllbGQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxvZy53YXJuKCdVbmtub3duIGZpZWxkIGZvciAke2NoYW5uZWx9LiAgQ2Fubm90IGNhbGN1bGF0ZSB2aWV3IHNpemUuJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGNoaWxkSW5kZXBlbmRlbnRGaWVsZHNXaXRoU3RlcDtcbiAgfVxuXG4gIHByaXZhdGUgYXNzZW1ibGVSb3dDb2x1bW5EYXRhKGNoYW5uZWw6ICdyb3cnIHwgJ2NvbHVtbicsIGNyb3NzZWREYXRhTmFtZTogc3RyaW5nLCBjaGlsZEluZGVwZW5kZW50RmllbGRzV2l0aFN0ZXA6IENoaWxkSW5kZXBlbmRlbnRGaWVsZHNXaXRoU3RlcCk6IFZnRGF0YSB7XG4gICAgbGV0IGFnZ3JlZ2F0ZUNoaWxkRmllbGQ6IFBhcnRpYWw8VmdBZ2dyZWdhdGVUcmFuc2Zvcm0+ID0ge307XG4gICAgY29uc3QgY2hpbGRDaGFubmVsID0gY2hhbm5lbCA9PT0gJ3JvdycgPyAneScgOiAneCc7XG5cbiAgICBpZiAoY2hpbGRJbmRlcGVuZGVudEZpZWxkc1dpdGhTdGVwW2NoaWxkQ2hhbm5lbF0pIHtcbiAgICAgIGlmIChjcm9zc2VkRGF0YU5hbWUpIHtcbiAgICAgICAgYWdncmVnYXRlQ2hpbGRGaWVsZCA9IHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBhIGNyb3NzZWQgZGF0YSwgY2FsY3VsYXRlIG1heFxuICAgICAgICAgIGZpZWxkczogW2BkaXN0aW5jdF8ke2NoaWxkSW5kZXBlbmRlbnRGaWVsZHNXaXRoU3RlcFtjaGlsZENoYW5uZWxdfWBdLFxuICAgICAgICAgIG9wczogWydtYXgnXSxcbiAgICAgICAgICAvLyBBbHRob3VnaCBpdCBpcyB0ZWNobmljYWxseSBhIG1heCwganVzdCBuYW1lIGl0IGRpc3RpbmN0IHNvIGl0J3MgZWFzaWVyIHRvIHJlZmVyIHRvIGl0XG4gICAgICAgICAgYXM6IFtgZGlzdGluY3RfJHtjaGlsZEluZGVwZW5kZW50RmllbGRzV2l0aFN0ZXBbY2hpbGRDaGFubmVsXX1gXVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYWdncmVnYXRlQ2hpbGRGaWVsZCA9IHtcbiAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBjcm9zc2VkIGRhdGEsIGp1c3QgY2FsY3VsYXRlIGRpc3RpbmN0XG4gICAgICAgICAgZmllbGRzOiBbY2hpbGRJbmRlcGVuZGVudEZpZWxkc1dpdGhTdGVwW2NoaWxkQ2hhbm5lbF1dLFxuICAgICAgICAgIG9wczogWydkaXN0aW5jdCddXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IGNoYW5uZWwgPT09ICdyb3cnID8gdGhpcy5yb3dOYW1lIDogdGhpcy5jb2x1bW5OYW1lLFxuICAgICAgLy8gVXNlIGRhdGEgZnJvbSB0aGUgY3Jvc3NlZCBvbmUgaWYgaXQgZXhpc3RcbiAgICAgIHNvdXJjZTogY3Jvc3NlZERhdGFOYW1lIHx8IHRoaXMuZGF0YSxcbiAgICAgIHRyYW5zZm9ybTogW3tcbiAgICAgICAgdHlwZTogJ2FnZ3JlZ2F0ZScsXG4gICAgICAgIGdyb3VwYnk6IGNoYW5uZWwgPT09ICdyb3cnID8gdGhpcy5yb3dGaWVsZHMgOiB0aGlzLmNvbHVtbkZpZWxkcyxcbiAgICAgICAgLi4uYWdncmVnYXRlQ2hpbGRGaWVsZFxuICAgICAgfV1cbiAgICB9O1xuICB9XG5cbiAgcHVibGljIGFzc2VtYmxlKCkge1xuICAgIGNvbnN0IGRhdGE6IFZnRGF0YVtdID0gW107XG4gICAgbGV0IGNyb3NzZWREYXRhTmFtZSA9IG51bGw7XG4gICAgY29uc3QgY2hpbGRJbmRlcGVuZGVudEZpZWxkc1dpdGhTdGVwID0gdGhpcy5nZXRDaGlsZEluZGVwZW5kZW50RmllbGRzV2l0aFN0ZXAoKTtcblxuICAgIGlmICh0aGlzLmNvbHVtbk5hbWUgJiYgdGhpcy5yb3dOYW1lICYmIChjaGlsZEluZGVwZW5kZW50RmllbGRzV2l0aFN0ZXAueCB8fCBjaGlsZEluZGVwZW5kZW50RmllbGRzV2l0aFN0ZXAueSkpIHtcbiAgICAgIC8vIE5lZWQgdG8gY3JlYXRlIGEgY3Jvc3MgZGF0YXNldCB0byBjb3JyZWN0bHkgY2FsY3VsYXRlIGNhcmRpbmFsaXR5XG4gICAgICBjcm9zc2VkRGF0YU5hbWUgPSBgY3Jvc3NfJHt0aGlzLmNvbHVtbk5hbWV9XyR7dGhpcy5yb3dOYW1lfWA7XG5cbiAgICAgIGNvbnN0IGZpZWxkcyA9IFtdLmNvbmNhdChcbiAgICAgICAgY2hpbGRJbmRlcGVuZGVudEZpZWxkc1dpdGhTdGVwLnggPyBbY2hpbGRJbmRlcGVuZGVudEZpZWxkc1dpdGhTdGVwLnhdIDogW10sXG4gICAgICAgIGNoaWxkSW5kZXBlbmRlbnRGaWVsZHNXaXRoU3RlcC55ID8gW2NoaWxkSW5kZXBlbmRlbnRGaWVsZHNXaXRoU3RlcC55XSA6IFtdLFxuICAgICAgKTtcbiAgICAgIGNvbnN0IG9wcyA9IGZpZWxkcy5tYXAoKCk6IEFnZ3JlZ2F0ZU9wID0+ICdkaXN0aW5jdCcpO1xuXG4gICAgICBkYXRhLnB1c2goe1xuICAgICAgICBuYW1lOiBjcm9zc2VkRGF0YU5hbWUsXG4gICAgICAgIHNvdXJjZTogdGhpcy5kYXRhLFxuICAgICAgICB0cmFuc2Zvcm06IFt7XG4gICAgICAgICAgdHlwZTogJ2FnZ3JlZ2F0ZScsXG4gICAgICAgICAgZ3JvdXBieTogdGhpcy5jb2x1bW5GaWVsZHMuY29uY2F0KHRoaXMucm93RmllbGRzKSxcbiAgICAgICAgICBmaWVsZHM6IGZpZWxkcyxcbiAgICAgICAgICBvcHNcbiAgICAgICAgfV1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLmNvbHVtbk5hbWUpIHtcbiAgICAgIGRhdGEucHVzaCh0aGlzLmFzc2VtYmxlUm93Q29sdW1uRGF0YSgnY29sdW1uJywgY3Jvc3NlZERhdGFOYW1lLCBjaGlsZEluZGVwZW5kZW50RmllbGRzV2l0aFN0ZXApKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5yb3dOYW1lKSB7XG4gICAgICBkYXRhLnB1c2godGhpcy5hc3NlbWJsZVJvd0NvbHVtbkRhdGEoJ3JvdycsIGNyb3NzZWREYXRhTmFtZSwgY2hpbGRJbmRlcGVuZGVudEZpZWxkc1dpdGhTdGVwKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn1cbiJdfQ=="},"lineCount":160}},"hash":"28e78d048e49debbe7ce6462228f0321","cacheData":{"env":{}}}