{"dependencies":[{"name":"/Users/summertime/Documents/GitHub/tfjs_CNN_example2/package.json","includedInParent":true,"mtime":1527740925000},{"name":"/Users/summertime/Documents/GitHub/tfjs_CNN_example2/.babelrc","includedInParent":true,"mtime":1527740925000},{"name":"/Users/summertime/Documents/GitHub/tfjs_CNN_example2/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":1520897090000},{"name":"vega-util","loc":{"line":20,"column":26}},{"name":"./aggregate","loc":{"line":21,"column":26}},{"name":"./bin","loc":{"line":22,"column":20}},{"name":"./channel","loc":{"line":23,"column":24}},{"name":"./log","loc":{"line":24,"column":18}},{"name":"./timeunit","loc":{"line":25,"column":25}},{"name":"./type","loc":{"line":26,"column":21}},{"name":"./util","loc":{"line":27,"column":21}}],"generated":{"js":"\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vega_util_1 = require(\"vega-util\");\nvar aggregate_1 = require(\"./aggregate\");\nvar bin_1 = require(\"./bin\");\nvar channel_1 = require(\"./channel\");\nvar log = require(\"./log\");\nvar timeunit_1 = require(\"./timeunit\");\nvar type_1 = require(\"./type\");\nvar util_1 = require(\"./util\");\nfunction isConditionalSelection(c) {\n    return c['selection'];\n}\nexports.isConditionalSelection = isConditionalSelection;\nfunction isRepeatRef(field) {\n    return field && !vega_util_1.isString(field) && 'repeat' in field;\n}\nexports.isRepeatRef = isRepeatRef;\nfunction toFieldDefBase(fieldDef) {\n    var field = fieldDef.field, timeUnit = fieldDef.timeUnit, bin = fieldDef.bin, aggregate = fieldDef.aggregate;\n    return __assign({}, (timeUnit ? { timeUnit: timeUnit } : {}), (bin ? { bin: bin } : {}), (aggregate ? { aggregate: aggregate } : {}), { field: field });\n}\nexports.toFieldDefBase = toFieldDefBase;\nfunction isConditionalDef(channelDef) {\n    return !!channelDef && !!channelDef.condition;\n}\nexports.isConditionalDef = isConditionalDef;\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\nfunction hasConditionalFieldDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && !vega_util_1.isArray(channelDef.condition) && isFieldDef(channelDef.condition);\n}\nexports.hasConditionalFieldDef = hasConditionalFieldDef;\nfunction hasConditionalValueDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && (vega_util_1.isArray(channelDef.condition) || isValueDef(channelDef.condition));\n}\nexports.hasConditionalValueDef = hasConditionalValueDef;\nfunction isFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\n}\nexports.isFieldDef = isFieldDef;\nfunction isStringFieldDef(fieldDef) {\n    return isFieldDef(fieldDef) && vega_util_1.isString(fieldDef.field);\n}\nexports.isStringFieldDef = isStringFieldDef;\nfunction isValueDef(channelDef) {\n    return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;\n}\nexports.isValueDef = isValueDef;\nfunction isScaleFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);\n}\nexports.isScaleFieldDef = isScaleFieldDef;\nfunction vgField(fieldDef, opt) {\n    if (opt === void 0) { opt = {}; }\n    var field = fieldDef.field;\n    var prefix = opt.prefix;\n    var suffix = opt.suffix;\n    if (isCount(fieldDef)) {\n        field = 'count_*';\n    }\n    else {\n        var fn = undefined;\n        if (!opt.nofn) {\n            if (fieldDef.bin) {\n                fn = bin_1.binToString(fieldDef.bin);\n                suffix = opt.binSuffix || '';\n            }\n            else if (fieldDef.aggregate) {\n                fn = String(opt.aggregate || fieldDef.aggregate);\n            }\n            else if (fieldDef.timeUnit) {\n                fn = String(fieldDef.timeUnit);\n            }\n        }\n        if (fn) {\n            field = fn + \"_\" + field;\n        }\n    }\n    if (suffix) {\n        field = field + \"_\" + suffix;\n    }\n    if (prefix) {\n        field = prefix + \"_\" + field;\n    }\n    if (opt.expr) {\n        field = \"\" + opt.expr + util_1.accessPath(field);\n    }\n    return field;\n}\nexports.vgField = vgField;\nfunction isDiscrete(fieldDef) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n        case 'geojson':\n            return true;\n        case 'quantitative':\n            return !!fieldDef.bin;\n        case 'latitude':\n        case 'longitude':\n        case 'temporal':\n            return false;\n    }\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\nexports.isDiscrete = isDiscrete;\nfunction isContinuous(fieldDef) {\n    return !isDiscrete(fieldDef);\n}\nexports.isContinuous = isContinuous;\nfunction isCount(fieldDef) {\n    return fieldDef.aggregate === 'count';\n}\nexports.isCount = isCount;\nfunction verbalTitleFormatter(fieldDef, config) {\n    var field = fieldDef.field, bin = fieldDef.bin, timeUnit = fieldDef.timeUnit, aggregate = fieldDef.aggregate;\n    if (aggregate === 'count') {\n        return config.countTitle;\n    }\n    else if (bin) {\n        return field + \" (binned)\";\n    }\n    else if (timeUnit) {\n        var units = timeunit_1.getTimeUnitParts(timeUnit).join('-');\n        return field + \" (\" + units + \")\";\n    }\n    else if (aggregate) {\n        return util_1.titlecase(aggregate) + \" of \" + field;\n    }\n    return field;\n}\nexports.verbalTitleFormatter = verbalTitleFormatter;\nfunction functionalTitleFormatter(fieldDef, config) {\n    var fn = fieldDef.aggregate || fieldDef.timeUnit || (fieldDef.bin && 'bin');\n    if (fn) {\n        return fn.toUpperCase() + '(' + fieldDef.field + ')';\n    }\n    else {\n        return fieldDef.field;\n    }\n}\nexports.functionalTitleFormatter = functionalTitleFormatter;\nexports.defaultTitleFormatter = function (fieldDef, config) {\n    switch (config.fieldTitle) {\n        case 'plain':\n            return fieldDef.field;\n        case 'functional':\n            return functionalTitleFormatter(fieldDef, config);\n        default:\n            return verbalTitleFormatter(fieldDef, config);\n    }\n};\nvar titleFormatter = exports.defaultTitleFormatter;\nfunction setTitleFormatter(formatter) {\n    titleFormatter = formatter;\n}\nexports.setTitleFormatter = setTitleFormatter;\nfunction resetTitleFormatter() {\n    setTitleFormatter(exports.defaultTitleFormatter);\n}\nexports.resetTitleFormatter = resetTitleFormatter;\nfunction title(fieldDef, config) {\n    return titleFormatter(fieldDef, config);\n}\nexports.title = title;\nfunction defaultType(fieldDef, channel) {\n    if (fieldDef.timeUnit) {\n        return 'temporal';\n    }\n    if (fieldDef.bin) {\n        return 'quantitative';\n    }\n    switch (channel_1.rangeType(channel)) {\n        case 'continuous':\n            return 'quantitative';\n        case 'discrete':\n            return 'nominal';\n        case 'flexible':// color\n            return 'nominal';\n        default:\n            return 'quantitative';\n    }\n}\nexports.defaultType = defaultType;\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\nfunction getFieldDef(channelDef) {\n    if (isFieldDef(channelDef)) {\n        return channelDef;\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return channelDef.condition;\n    }\n    return undefined;\n}\nexports.getFieldDef = getFieldDef;\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\nfunction normalize(channelDef, channel) {\n    if (vega_util_1.isString(channelDef) || vega_util_1.isNumber(channelDef) || vega_util_1.isBoolean(channelDef)) {\n        var primitiveType = vega_util_1.isString(channelDef) ? 'string' :\n            vega_util_1.isNumber(channelDef) ? 'number' : 'boolean';\n        log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n        return { value: channelDef };\n    }\n    // If a fieldDef contains a field, we need type.\n    if (isFieldDef(channelDef)) {\n        return normalizeFieldDef(channelDef, channel);\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return __assign({}, channelDef, { \n            // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n            condition: normalizeFieldDef(channelDef.condition, channel) });\n    }\n    return channelDef;\n}\nexports.normalize = normalize;\nfunction normalizeFieldDef(fieldDef, channel) {\n    // Drop invalid aggregate\n    if (fieldDef.aggregate && !aggregate_1.isAggregateOp(fieldDef.aggregate)) {\n        var aggregate = fieldDef.aggregate, fieldDefWithoutAggregate = __rest(fieldDef, [\"aggregate\"]);\n        log.warn(log.message.invalidAggregate(fieldDef.aggregate));\n        fieldDef = fieldDefWithoutAggregate;\n    }\n    // Normalize Time Unit\n    if (fieldDef.timeUnit) {\n        fieldDef = __assign({}, fieldDef, { timeUnit: timeunit_1.normalizeTimeUnit(fieldDef.timeUnit) });\n    }\n    // Normalize bin\n    if (fieldDef.bin) {\n        fieldDef = __assign({}, fieldDef, { bin: normalizeBin(fieldDef.bin, channel) });\n    }\n    // Normalize Type\n    if (fieldDef.type) {\n        var fullType = type_1.getFullName(fieldDef.type);\n        if (fieldDef.type !== fullType) {\n            // convert short type to full type\n            fieldDef = __assign({}, fieldDef, { type: fullType });\n        }\n        if (fieldDef.type !== 'quantitative') {\n            if (aggregate_1.isCountingAggregateOp(fieldDef.aggregate)) {\n                log.warn(log.message.invalidFieldTypeForCountAggregate(fieldDef.type, fieldDef.aggregate));\n                fieldDef = __assign({}, fieldDef, { type: 'quantitative' });\n            }\n        }\n    }\n    else {\n        // If type is empty / invalid, then augment with default type\n        var newType = defaultType(fieldDef, channel);\n        log.warn(log.message.emptyOrInvalidFieldType(fieldDef.type, channel, newType));\n        fieldDef = __assign({}, fieldDef, { type: newType });\n    }\n    var _a = channelCompatibility(fieldDef, channel), compatible = _a.compatible, warning = _a.warning;\n    if (!compatible) {\n        log.warn(warning);\n    }\n    return fieldDef;\n}\nexports.normalizeFieldDef = normalizeFieldDef;\nfunction normalizeBin(bin, channel) {\n    if (vega_util_1.isBoolean(bin)) {\n        return { maxbins: bin_1.autoMaxBins(channel) };\n    }\n    else if (!bin.maxbins && !bin.step) {\n        return __assign({}, bin, { maxbins: bin_1.autoMaxBins(channel) });\n    }\n    else {\n        return bin;\n    }\n}\nexports.normalizeBin = normalizeBin;\nvar COMPATIBLE = { compatible: true };\nfunction channelCompatibility(fieldDef, channel) {\n    switch (channel) {\n        case 'row':\n        case 'column':\n            if (isContinuous(fieldDef) && !fieldDef.timeUnit) {\n                // TODO:(https://github.com/vega/vega-lite/issues/2011):\n                // with timeUnit it's not always strictly continuous\n                return {\n                    compatible: false,\n                    warning: log.message.facetChannelShouldBeDiscrete(channel)\n                };\n            }\n            return COMPATIBLE;\n        case 'x':\n        case 'y':\n        case 'color':\n        case 'fill':\n        case 'stroke':\n        case 'text':\n        case 'detail':\n        case 'key':\n        case 'tooltip':\n        case 'href':\n            return COMPATIBLE;\n        case 'longitude':\n        case 'longitude2':\n        case 'latitude':\n        case 'latitude2':\n            if (fieldDef.type !== type_1.QUANTITATIVE) {\n                return {\n                    compatible: false,\n                    warning: \"Channel \" + channel + \" should not be used with \" + fieldDef.type + \" field.\"\n                };\n            }\n            return COMPATIBLE;\n        case 'opacity':\n        case 'size':\n        case 'x2':\n        case 'y2':\n            if (isDiscrete(fieldDef) && !fieldDef.bin) {\n                return {\n                    compatible: false,\n                    warning: \"Channel \" + channel + \" should not be used with discrete field.\"\n                };\n            }\n            return COMPATIBLE;\n        case 'shape':\n            if (fieldDef.type !== 'nominal' && fieldDef.type !== 'geojson') {\n                return {\n                    compatible: false,\n                    warning: 'Shape channel should be used with nominal data or geojson only'\n                };\n            }\n            return COMPATIBLE;\n        case 'order':\n            if (fieldDef.type === 'nominal') {\n                return {\n                    compatible: false,\n                    warning: \"Channel order is inappropriate for nominal field, which has no inherent order.\"\n                };\n            }\n            return COMPATIBLE;\n    }\n    throw new Error('channelCompatability not implemented for channel ' + channel);\n}\nexports.channelCompatibility = channelCompatibility;\nfunction isNumberFieldDef(fieldDef) {\n    return fieldDef.type === 'quantitative' || !!fieldDef.bin;\n}\nexports.isNumberFieldDef = isNumberFieldDef;\nfunction isTimeFieldDef(fieldDef) {\n    return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;\n}\nexports.isTimeFieldDef = isTimeFieldDef;\n//# sourceMappingURL=data:application/json;base64,","map":{"mappings":[{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":234,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":235,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":236,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":237,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":238,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":239,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":240,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":241,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":242,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":243,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":244,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":245,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":246,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":247,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":248,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":249,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":250,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":251,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":252,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":253,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":254,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":255,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":256,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":257,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":258,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":259,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":260,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":261,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":262,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":263,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":264,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":265,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":266,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":267,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":268,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":269,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":270,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":271,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":272,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":273,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":274,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":275,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":276,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":277,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":278,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":279,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":280,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":281,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":282,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":283,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":284,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":285,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":286,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":287,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":288,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":289,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":290,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":291,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":292,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":293,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":294,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":295,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":296,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":297,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":298,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":299,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":300,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":301,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":302,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":303,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":304,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":305,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":306,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":307,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":308,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":309,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":310,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":311,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":312,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":313,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":314,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":315,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":316,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":317,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":318,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":319,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":320,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":321,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":322,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":323,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":324,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":325,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":326,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":327,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":328,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":329,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":330,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":331,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":332,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":333,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":334,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":335,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":336,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":337,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":338,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":339,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":340,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":341,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":342,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":343,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":344,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":345,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":346,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":347,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":348,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":349,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":350,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":351,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":352,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":353,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":354,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":355,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":356,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":357,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":358,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":359,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":360,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":361,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":362,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":363,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":364,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":365,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":366,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":367,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":368,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/vega-lite/build/src/fielddef.js","original":{"line":369,"column":0},"generated":{"line":369,"column":0}}],"sources":{"node_modules/vega-lite/build/src/fielddef.js":"\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vega_util_1 = require(\"vega-util\");\nvar aggregate_1 = require(\"./aggregate\");\nvar bin_1 = require(\"./bin\");\nvar channel_1 = require(\"./channel\");\nvar log = require(\"./log\");\nvar timeunit_1 = require(\"./timeunit\");\nvar type_1 = require(\"./type\");\nvar util_1 = require(\"./util\");\nfunction isConditionalSelection(c) {\n    return c['selection'];\n}\nexports.isConditionalSelection = isConditionalSelection;\nfunction isRepeatRef(field) {\n    return field && !vega_util_1.isString(field) && 'repeat' in field;\n}\nexports.isRepeatRef = isRepeatRef;\nfunction toFieldDefBase(fieldDef) {\n    var field = fieldDef.field, timeUnit = fieldDef.timeUnit, bin = fieldDef.bin, aggregate = fieldDef.aggregate;\n    return __assign({}, (timeUnit ? { timeUnit: timeUnit } : {}), (bin ? { bin: bin } : {}), (aggregate ? { aggregate: aggregate } : {}), { field: field });\n}\nexports.toFieldDefBase = toFieldDefBase;\nfunction isConditionalDef(channelDef) {\n    return !!channelDef && !!channelDef.condition;\n}\nexports.isConditionalDef = isConditionalDef;\n/**\n * Return if a channelDef is a ConditionalValueDef with ConditionFieldDef\n */\nfunction hasConditionalFieldDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && !vega_util_1.isArray(channelDef.condition) && isFieldDef(channelDef.condition);\n}\nexports.hasConditionalFieldDef = hasConditionalFieldDef;\nfunction hasConditionalValueDef(channelDef) {\n    return !!channelDef && !!channelDef.condition && (vega_util_1.isArray(channelDef.condition) || isValueDef(channelDef.condition));\n}\nexports.hasConditionalValueDef = hasConditionalValueDef;\nfunction isFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['field'] || channelDef['aggregate'] === 'count');\n}\nexports.isFieldDef = isFieldDef;\nfunction isStringFieldDef(fieldDef) {\n    return isFieldDef(fieldDef) && vega_util_1.isString(fieldDef.field);\n}\nexports.isStringFieldDef = isStringFieldDef;\nfunction isValueDef(channelDef) {\n    return channelDef && 'value' in channelDef && channelDef['value'] !== undefined;\n}\nexports.isValueDef = isValueDef;\nfunction isScaleFieldDef(channelDef) {\n    return !!channelDef && (!!channelDef['scale'] || !!channelDef['sort']);\n}\nexports.isScaleFieldDef = isScaleFieldDef;\nfunction vgField(fieldDef, opt) {\n    if (opt === void 0) { opt = {}; }\n    var field = fieldDef.field;\n    var prefix = opt.prefix;\n    var suffix = opt.suffix;\n    if (isCount(fieldDef)) {\n        field = 'count_*';\n    }\n    else {\n        var fn = undefined;\n        if (!opt.nofn) {\n            if (fieldDef.bin) {\n                fn = bin_1.binToString(fieldDef.bin);\n                suffix = opt.binSuffix || '';\n            }\n            else if (fieldDef.aggregate) {\n                fn = String(opt.aggregate || fieldDef.aggregate);\n            }\n            else if (fieldDef.timeUnit) {\n                fn = String(fieldDef.timeUnit);\n            }\n        }\n        if (fn) {\n            field = fn + \"_\" + field;\n        }\n    }\n    if (suffix) {\n        field = field + \"_\" + suffix;\n    }\n    if (prefix) {\n        field = prefix + \"_\" + field;\n    }\n    if (opt.expr) {\n        field = \"\" + opt.expr + util_1.accessPath(field);\n    }\n    return field;\n}\nexports.vgField = vgField;\nfunction isDiscrete(fieldDef) {\n    switch (fieldDef.type) {\n        case 'nominal':\n        case 'ordinal':\n        case 'geojson':\n            return true;\n        case 'quantitative':\n            return !!fieldDef.bin;\n        case 'latitude':\n        case 'longitude':\n        case 'temporal':\n            return false;\n    }\n    throw new Error(log.message.invalidFieldType(fieldDef.type));\n}\nexports.isDiscrete = isDiscrete;\nfunction isContinuous(fieldDef) {\n    return !isDiscrete(fieldDef);\n}\nexports.isContinuous = isContinuous;\nfunction isCount(fieldDef) {\n    return fieldDef.aggregate === 'count';\n}\nexports.isCount = isCount;\nfunction verbalTitleFormatter(fieldDef, config) {\n    var field = fieldDef.field, bin = fieldDef.bin, timeUnit = fieldDef.timeUnit, aggregate = fieldDef.aggregate;\n    if (aggregate === 'count') {\n        return config.countTitle;\n    }\n    else if (bin) {\n        return field + \" (binned)\";\n    }\n    else if (timeUnit) {\n        var units = timeunit_1.getTimeUnitParts(timeUnit).join('-');\n        return field + \" (\" + units + \")\";\n    }\n    else if (aggregate) {\n        return util_1.titlecase(aggregate) + \" of \" + field;\n    }\n    return field;\n}\nexports.verbalTitleFormatter = verbalTitleFormatter;\nfunction functionalTitleFormatter(fieldDef, config) {\n    var fn = fieldDef.aggregate || fieldDef.timeUnit || (fieldDef.bin && 'bin');\n    if (fn) {\n        return fn.toUpperCase() + '(' + fieldDef.field + ')';\n    }\n    else {\n        return fieldDef.field;\n    }\n}\nexports.functionalTitleFormatter = functionalTitleFormatter;\nexports.defaultTitleFormatter = function (fieldDef, config) {\n    switch (config.fieldTitle) {\n        case 'plain':\n            return fieldDef.field;\n        case 'functional':\n            return functionalTitleFormatter(fieldDef, config);\n        default:\n            return verbalTitleFormatter(fieldDef, config);\n    }\n};\nvar titleFormatter = exports.defaultTitleFormatter;\nfunction setTitleFormatter(formatter) {\n    titleFormatter = formatter;\n}\nexports.setTitleFormatter = setTitleFormatter;\nfunction resetTitleFormatter() {\n    setTitleFormatter(exports.defaultTitleFormatter);\n}\nexports.resetTitleFormatter = resetTitleFormatter;\nfunction title(fieldDef, config) {\n    return titleFormatter(fieldDef, config);\n}\nexports.title = title;\nfunction defaultType(fieldDef, channel) {\n    if (fieldDef.timeUnit) {\n        return 'temporal';\n    }\n    if (fieldDef.bin) {\n        return 'quantitative';\n    }\n    switch (channel_1.rangeType(channel)) {\n        case 'continuous':\n            return 'quantitative';\n        case 'discrete':\n            return 'nominal';\n        case 'flexible':// color\n            return 'nominal';\n        default:\n            return 'quantitative';\n    }\n}\nexports.defaultType = defaultType;\n/**\n * Returns the fieldDef -- either from the outer channelDef or from the condition of channelDef.\n * @param channelDef\n */\nfunction getFieldDef(channelDef) {\n    if (isFieldDef(channelDef)) {\n        return channelDef;\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return channelDef.condition;\n    }\n    return undefined;\n}\nexports.getFieldDef = getFieldDef;\n/**\n * Convert type to full, lowercase type, or augment the fieldDef with a default type if missing.\n */\nfunction normalize(channelDef, channel) {\n    if (vega_util_1.isString(channelDef) || vega_util_1.isNumber(channelDef) || vega_util_1.isBoolean(channelDef)) {\n        var primitiveType = vega_util_1.isString(channelDef) ? 'string' :\n            vega_util_1.isNumber(channelDef) ? 'number' : 'boolean';\n        log.warn(log.message.primitiveChannelDef(channel, primitiveType, channelDef));\n        return { value: channelDef };\n    }\n    // If a fieldDef contains a field, we need type.\n    if (isFieldDef(channelDef)) {\n        return normalizeFieldDef(channelDef, channel);\n    }\n    else if (hasConditionalFieldDef(channelDef)) {\n        return __assign({}, channelDef, { \n            // Need to cast as normalizeFieldDef normally return FieldDef, but here we know that it is definitely Condition<FieldDef>\n            condition: normalizeFieldDef(channelDef.condition, channel) });\n    }\n    return channelDef;\n}\nexports.normalize = normalize;\nfunction normalizeFieldDef(fieldDef, channel) {\n    // Drop invalid aggregate\n    if (fieldDef.aggregate && !aggregate_1.isAggregateOp(fieldDef.aggregate)) {\n        var aggregate = fieldDef.aggregate, fieldDefWithoutAggregate = __rest(fieldDef, [\"aggregate\"]);\n        log.warn(log.message.invalidAggregate(fieldDef.aggregate));\n        fieldDef = fieldDefWithoutAggregate;\n    }\n    // Normalize Time Unit\n    if (fieldDef.timeUnit) {\n        fieldDef = __assign({}, fieldDef, { timeUnit: timeunit_1.normalizeTimeUnit(fieldDef.timeUnit) });\n    }\n    // Normalize bin\n    if (fieldDef.bin) {\n        fieldDef = __assign({}, fieldDef, { bin: normalizeBin(fieldDef.bin, channel) });\n    }\n    // Normalize Type\n    if (fieldDef.type) {\n        var fullType = type_1.getFullName(fieldDef.type);\n        if (fieldDef.type !== fullType) {\n            // convert short type to full type\n            fieldDef = __assign({}, fieldDef, { type: fullType });\n        }\n        if (fieldDef.type !== 'quantitative') {\n            if (aggregate_1.isCountingAggregateOp(fieldDef.aggregate)) {\n                log.warn(log.message.invalidFieldTypeForCountAggregate(fieldDef.type, fieldDef.aggregate));\n                fieldDef = __assign({}, fieldDef, { type: 'quantitative' });\n            }\n        }\n    }\n    else {\n        // If type is empty / invalid, then augment with default type\n        var newType = defaultType(fieldDef, channel);\n        log.warn(log.message.emptyOrInvalidFieldType(fieldDef.type, channel, newType));\n        fieldDef = __assign({}, fieldDef, { type: newType });\n    }\n    var _a = channelCompatibility(fieldDef, channel), compatible = _a.compatible, warning = _a.warning;\n    if (!compatible) {\n        log.warn(warning);\n    }\n    return fieldDef;\n}\nexports.normalizeFieldDef = normalizeFieldDef;\nfunction normalizeBin(bin, channel) {\n    if (vega_util_1.isBoolean(bin)) {\n        return { maxbins: bin_1.autoMaxBins(channel) };\n    }\n    else if (!bin.maxbins && !bin.step) {\n        return __assign({}, bin, { maxbins: bin_1.autoMaxBins(channel) });\n    }\n    else {\n        return bin;\n    }\n}\nexports.normalizeBin = normalizeBin;\nvar COMPATIBLE = { compatible: true };\nfunction channelCompatibility(fieldDef, channel) {\n    switch (channel) {\n        case 'row':\n        case 'column':\n            if (isContinuous(fieldDef) && !fieldDef.timeUnit) {\n                // TODO:(https://github.com/vega/vega-lite/issues/2011):\n                // with timeUnit it's not always strictly continuous\n                return {\n                    compatible: false,\n                    warning: log.message.facetChannelShouldBeDiscrete(channel)\n                };\n            }\n            return COMPATIBLE;\n        case 'x':\n        case 'y':\n        case 'color':\n        case 'fill':\n        case 'stroke':\n        case 'text':\n        case 'detail':\n        case 'key':\n        case 'tooltip':\n        case 'href':\n            return COMPATIBLE;\n        case 'longitude':\n        case 'longitude2':\n        case 'latitude':\n        case 'latitude2':\n            if (fieldDef.type !== type_1.QUANTITATIVE) {\n                return {\n                    compatible: false,\n                    warning: \"Channel \" + channel + \" should not be used with \" + fieldDef.type + \" field.\"\n                };\n            }\n            return COMPATIBLE;\n        case 'opacity':\n        case 'size':\n        case 'x2':\n        case 'y2':\n            if (isDiscrete(fieldDef) && !fieldDef.bin) {\n                return {\n                    compatible: false,\n                    warning: \"Channel \" + channel + \" should not be used with discrete field.\"\n                };\n            }\n            return COMPATIBLE;\n        case 'shape':\n            if (fieldDef.type !== 'nominal' && fieldDef.type !== 'geojson') {\n                return {\n                    compatible: false,\n                    warning: 'Shape channel should be used with nominal data or geojson only'\n                };\n            }\n            return COMPATIBLE;\n        case 'order':\n            if (fieldDef.type === 'nominal') {\n                return {\n                    compatible: false,\n                    warning: \"Channel order is inappropriate for nominal field, which has no inherent order.\"\n                };\n            }\n            return COMPATIBLE;\n    }\n    throw new Error('channelCompatability not implemented for channel ' + channel);\n}\nexports.channelCompatibility = channelCompatibility;\nfunction isNumberFieldDef(fieldDef) {\n    return fieldDef.type === 'quantitative' || !!fieldDef.bin;\n}\nexports.isNumberFieldDef = isNumberFieldDef;\nfunction isTimeFieldDef(fieldDef) {\n    return fieldDef.type === 'temporal' || !!fieldDef.timeUnit;\n}\nexports.isTimeFieldDef = isTimeFieldDef;\n//# sourceMappingURL=data:application/json;base64,"},"lineCount":369}},"hash":"3a8e6481cc9894d174eca5c9d5ee6889","cacheData":{"env":{}}}