{"dependencies":[{"name":"/Users/summertime/Documents/GitHub/tfjs_CNN_example2/package.json","includedInParent":true,"mtime":1527740925000},{"name":"/Users/summertime/Documents/GitHub/tfjs_CNN_example2/.babelrc","includedInParent":true,"mtime":1527740925000},{"name":"/Users/summertime/Documents/GitHub/tfjs_CNN_example2/node_modules/vega-lite/build/package.json","includedInParent":true,"mtime":1520897090000},{"name":"vega-util","loc":{"line":3,"column":26}},{"name":"../../channel","loc":{"line":4,"column":24}},{"name":"../../log","loc":{"line":5,"column":18}},{"name":"../../scale","loc":{"line":7,"column":22}},{"name":"../../util","loc":{"line":8,"column":19}},{"name":"../../vega.schema","loc":{"line":9,"column":28}},{"name":"../model","loc":{"line":10,"column":22}},{"name":"../split","loc":{"line":11,"column":22}},{"name":"./properties","loc":{"line":12,"column":27}}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vega_util_1 = require(\"vega-util\");\nvar channel_1 = require(\"../../channel\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar scale_2 = require(\"../../scale\");\nvar util = require(\"../../util\");\nvar vega_schema_1 = require(\"../../vega.schema\");\nvar model_1 = require(\"../model\");\nvar split_1 = require(\"../split\");\nvar properties_1 = require(\"./properties\");\nexports.RANGE_PROPERTIES = ['range', 'rangeStep', 'scheme'];\nfunction parseScaleRange(model) {\n    if (model_1.isUnitModel(model)) {\n        parseUnitScaleRange(model);\n    }\n    else {\n        properties_1.parseNonUnitScaleProperty(model, 'range');\n    }\n}\nexports.parseScaleRange = parseScaleRange;\nfunction parseUnitScaleRange(model) {\n    var localScaleComponents = model.component.scales;\n    // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!\n    channel_1.SCALE_CHANNELS.forEach(function (channel) {\n        var localScaleCmpt = localScaleComponents[channel];\n        if (!localScaleCmpt) {\n            return;\n        }\n        var mergedScaleCmpt = model.getScaleComponent(channel);\n        var specifiedScale = model.specifiedScales[channel];\n        var fieldDef = model.fieldDef(channel);\n        // Read if there is a specified width/height\n        var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n        var sizeSpecified = sizeType ? !!model.component.layoutSize.get(sizeType) : undefined;\n        var scaleType = mergedScaleCmpt.get('type');\n        // if autosize is fit, size cannot be data driven\n        var rangeStep = util.contains(['point', 'band'], scaleType) || !!specifiedScale.rangeStep;\n        if (sizeType && model.fit && !sizeSpecified && rangeStep) {\n            log.warn(log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);\n            sizeSpecified = true;\n        }\n        var xyRangeSteps = getXYRangeStep(model);\n        var rangeWithExplicit = parseRangeForChannel(channel, scaleType, fieldDef.type, specifiedScale, model.config, localScaleCmpt.get('zero'), model.mark(), sizeSpecified, model.getName(sizeType), xyRangeSteps);\n        localScaleCmpt.setWithExplicit('range', rangeWithExplicit);\n    });\n}\nfunction getXYRangeStep(model) {\n    var xyRangeSteps = [];\n    var xScale = model.getScaleComponent('x');\n    var xRange = xScale && xScale.get('range');\n    if (xRange && vega_schema_1.isVgRangeStep(xRange) && vega_util_1.isNumber(xRange.step)) {\n        xyRangeSteps.push(xRange.step);\n    }\n    var yScale = model.getScaleComponent('y');\n    var yRange = yScale && yScale.get('range');\n    if (yRange && vega_schema_1.isVgRangeStep(yRange) && vega_util_1.isNumber(yRange.step)) {\n        xyRangeSteps.push(yRange.step);\n    }\n    return xyRangeSteps;\n}\n/**\n * Return mixins that includes one of the range properties (range, rangeStep, scheme).\n */\nfunction parseRangeForChannel(channel, scaleType, type, specifiedScale, config, zero, mark, sizeSpecified, sizeSignal, xyRangeSteps) {\n    var noRangeStep = sizeSpecified || specifiedScale.rangeStep === null;\n    // Check if any of the range properties is specified.\n    // If so, check if it is compatible and make sure that we only output one of the properties\n    for (var _i = 0, RANGE_PROPERTIES_1 = exports.RANGE_PROPERTIES; _i < RANGE_PROPERTIES_1.length; _i++) {\n        var property = RANGE_PROPERTIES_1[_i];\n        if (specifiedScale[property] !== undefined) {\n            var supportedByScaleType = scale_1.scaleTypeSupportProperty(scaleType, property);\n            var channelIncompatability = scale_1.channelScalePropertyIncompatability(channel, property);\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));\n            }\n            else if (channelIncompatability) {\n                log.warn(channelIncompatability);\n            }\n            else {\n                switch (property) {\n                    case 'range':\n                        return split_1.makeExplicit(specifiedScale[property]);\n                    case 'scheme':\n                        return split_1.makeExplicit(parseScheme(specifiedScale[property]));\n                    case 'rangeStep':\n                        var rangeStep = specifiedScale[property];\n                        if (rangeStep !== null) {\n                            if (!sizeSpecified) {\n                                return split_1.makeExplicit({ step: rangeStep });\n                            }\n                            else {\n                                // If top-level size is specified, we ignore specified rangeStep.\n                                log.warn(log.message.rangeStepDropped(channel));\n                            }\n                        }\n                }\n            }\n        }\n    }\n    return split_1.makeImplicit(defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep));\n}\nexports.parseRangeForChannel = parseRangeForChannel;\nfunction parseScheme(scheme) {\n    if (scale_1.isExtendedScheme(scheme)) {\n        var r = { scheme: scheme.name };\n        if (scheme.count) {\n            r.count = scheme.count;\n        }\n        if (scheme.extent) {\n            r.extent = scheme.extent;\n        }\n        return r;\n    }\n    return { scheme: scheme };\n}\nfunction defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep) {\n    switch (channel) {\n        case channel_1.X:\n        case channel_1.Y:\n            if (util.contains(['point', 'band'], scaleType) && !noRangeStep) {\n                if (channel === channel_1.X && mark === 'text') {\n                    if (config.scale.textXRangeStep) {\n                        return { step: config.scale.textXRangeStep };\n                    }\n                }\n                else {\n                    if (config.scale.rangeStep) {\n                        return { step: config.scale.rangeStep };\n                    }\n                }\n            }\n            // If range step is null, use zero to width or height.\n            // Note that these range signals are temporary\n            // as they can be merged and renamed.\n            // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)\n            // We will later replace these temporary names with\n            // the final name in assembleScaleRange()\n            if (channel === channel_1.Y && scale_2.hasContinuousDomain(scaleType)) {\n                // For y continuous scale, we have to start from the height as the bottom part has the max value.\n                return [{ signal: sizeSignal }, 0];\n            }\n            else {\n                return [0, { signal: sizeSignal }];\n            }\n        case channel_1.SIZE:\n            // TODO: support custom rangeMin, rangeMax\n            var rangeMin = sizeRangeMin(mark, zero, config);\n            var rangeMax = sizeRangeMax(mark, xyRangeSteps, config);\n            return [rangeMin, rangeMax];\n        case channel_1.SHAPE:\n            return 'symbol';\n        case channel_1.COLOR:\n        case channel_1.FILL:\n        case channel_1.STROKE:\n            if (scaleType === 'ordinal') {\n                // Only nominal data uses ordinal scale by default\n                return type === 'nominal' ? 'category' : 'ordinal';\n            }\n            return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';\n        case channel_1.OPACITY:\n            // TODO: support custom rangeMin, rangeMax\n            return [config.scale.minOpacity, config.scale.maxOpacity];\n    }\n    /* istanbul ignore next: should never reach here */\n    throw new Error(\"Scale range undefined for channel \" + channel);\n}\nexports.defaultRange = defaultRange;\nfunction sizeRangeMin(mark, zero, config) {\n    if (zero) {\n        return 0;\n    }\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            return config.scale.minBandSize;\n        case 'line':\n        case 'rule':\n            return config.scale.minStrokeWidth;\n        case 'text':\n            return config.scale.minFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            return config.scale.minSize;\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMin not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\nfunction sizeRangeMax(mark, xyRangeSteps, config) {\n    var scaleConfig = config.scale;\n    // TODO(#1168): make max size scale based on rangeStep / overall plot size\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            if (config.scale.maxBandSize !== undefined) {\n                return config.scale.maxBandSize;\n            }\n            return minXYRangeStep(xyRangeSteps, config.scale) - 1;\n        case 'line':\n        case 'rule':\n            return config.scale.maxStrokeWidth;\n        case 'text':\n            return config.scale.maxFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            if (config.scale.maxSize) {\n                return config.scale.maxSize;\n            }\n            // FIXME this case totally should be refactored\n            var pointStep = minXYRangeStep(xyRangeSteps, scaleConfig);\n            return (pointStep - 2) * (pointStep - 2);\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMax not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\n/**\n * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.\n */\nfunction minXYRangeStep(xyRangeSteps, scaleConfig) {\n    if (xyRangeSteps.length > 0) {\n        return Math.min.apply(null, xyRangeSteps);\n    }\n    if (scaleConfig.rangeStep) {\n        return scaleConfig.rangeStep;\n    }\n    return 21; // FIXME: re-evaluate the default value here.\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZ2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvY29tcGlsZS9zY2FsZS9yYW5nZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHVDQUFtQztBQUVuQyx5Q0FBcUg7QUFFckgsK0JBQWlDO0FBRWpDLHFDQVNxQjtBQUNyQixxQ0FBZ0Q7QUFFaEQsaUNBQW1DO0FBQ25DLGlEQUFtRTtBQUNuRSxrQ0FBNEM7QUFDNUMsa0NBQThEO0FBRzlELDJDQUF1RDtBQUsxQyxRQUFBLGdCQUFnQixHQUFvQixDQUFDLE9BQU8sRUFBRSxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUM7QUFHbEYseUJBQWdDLEtBQVk7SUFDMUMsRUFBRSxDQUFDLENBQUMsbUJBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdkIsbUJBQW1CLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUFDLElBQUksQ0FBQyxDQUFDO1FBQ04sc0NBQXlCLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzVDLENBQUM7QUFDSCxDQUFDO0FBTkQsMENBTUM7QUFFRCw2QkFBNkIsS0FBZ0I7SUFDM0MsSUFBTSxvQkFBb0IsR0FBd0IsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUM7SUFFekUsZ0ZBQWdGO0lBQ2hGLHdCQUFjLENBQUMsT0FBTyxDQUFDLFVBQUMsT0FBcUI7UUFDM0MsSUFBTSxjQUFjLEdBQUcsb0JBQW9CLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsRUFBRSxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sQ0FBQztRQUNULENBQUM7UUFDRCxJQUFNLGVBQWUsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFHekQsSUFBTSxjQUFjLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN0RCxJQUFNLFFB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QUMsS0FBSyxDQUFDLElBQUksRUFBRSxZQUFZLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBQ0QsRUFBRSxDQUFDLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7UUFDMUIsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUM7SUFDL0IsQ0FBQztJQUNELE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyw2Q0FBNkM7QUFDMUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNOdW1iZXJ9IGZyb20gJ3ZlZ2EtdXRpbCc7XG5cbmltcG9ydCB7Q2hhbm5lbCwgQ09MT1IsIEZJTEwsIE9QQUNJVFksIFNDQUxFX0NIQU5ORUxTLCBTY2FsZUNoYW5uZWwsIFNIQVBFLCBTSVpFLCBTVFJPS0UsIFgsIFl9IGZyb20gJy4uLy4uL2NoYW5uZWwnO1xuaW1wb3J0IHtDb25maWd9IGZyb20gJy4uLy4uL2NvbmZpZyc7XG5pbXBvcnQgKiBhcyBsb2cgZnJvbSAnLi4vLi4vbG9nJztcbmltcG9ydCB7TWFya30gZnJvbSAnLi4vLi4vbWFyayc7XG5pbXBvcnQge1xuICBjaGFubmVsU2NhbGVQcm9wZXJ0eUluY29tcGF0YWJpbGl0eSxcbiAgaXNFeHRlbmRlZFNjaGVtZSxcbiAgUmFuZ2UsXG4gIFNjYWxlLFxuICBTY2FsZUNvbmZpZyxcbiAgU2NhbGVUeXBlLFxuICBzY2FsZVR5cGVTdXBwb3J0UHJvcGVydHksXG4gIFNjaGVtZSxcbn0gZnJvbSAnLi4vLi4vc2NhbGUnO1xuaW1wb3J0IHtoYXNDb250aW51b3VzRG9tYWlufSBmcm9tICcuLi8uLi9zY2FsZSc7XG5pbXBvcnQge1R5cGV9IGZyb20gJy4uLy4uL3R5cGUnO1xuaW1wb3J0ICogYXMgdXRpbCBmcm9tICcuLi8uLi91dGlsJztcbmltcG9ydCB7aXNWZ1JhbmdlU3RlcCwgVmdSYW5nZSwgVmdTY2hlbWV9IGZyb20gJy4uLy4uL3ZlZ2Euc2NoZW1hJztcbmltcG9ydCB7aXNVbml0TW9kZWwsIE1vZGVsfSBmcm9tICcuLi9tb2RlbCc7XG5pbXBvcnQge0V4cGxpY2l0LCBtYWtlRXhwbGljaXQsIG1ha2VJbXBsaWNpdH0gZnJvbSAnLi4vc3BsaXQnO1xuaW1wb3J0IHtVbml0TW9kZWx9IGZyb20gJy4uL3VuaXQnO1xuaW1wb3J0IHtTY2FsZUNvbXBvbmVudEluZGV4fSBmcm9tICcuL2NvbXBvbmVudCc7XG5pbXBvcnQge3BhcnNlTm9uVW5pdFNjYWxlUHJvcGVydHl9IGZyb20gJy4vcHJvcGVydGllcyc7XG5cblxuZXhwb3J0IHR5cGUgUmFuZ2VNaXhpbnMgPSB7cmFuZ2U6IFJhbmdlfSB8IHtyYW5nZVN0ZXA6IG51bWJlcn0gfCB7c2NoZW1lOiBTY2hlbWV9O1xuXG5leHBvcnQgY29uc3QgUkFOR0VfUFJPUEVSVElFUzogKGtleW9mIFNjYWxlKVtdID0gWydyYW5nZScsICdyYW5nZVN0ZXAnLCAnc2NoZW1lJ107XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlU2NhbGVSYW5nZShtb2RlbDogTW9kZWwpIHtcbiAgaWYgKGlzVW5pdE1vZGVsKG1vZGVsKSkge1xuICAgIHBhcnNlVW5pdFNjYWxlUmFuZ2UobW9kZWwpO1xuICB9IGVsc2Uge1xuICAgIHBhcnNlTm9uVW5pdFNjYWxlUHJvcGVydHkobW9kZWwsICdyYW5nZScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlVW5pdFNjYWxlUmFuZ2UobW9kZWw6IFVuaXRNb2RlbCkge1xuICBjb25zdCBsb2NhbFNjYWxlQ29tcG9uZW50czogU2NhbGVDb21wb25lbnRJbmRleCA9IG1vZGVsLmNvbXBvbmVudC5zY2FsZXM7XG5cbiAgLy8gdXNlIFNDQUxFX0NIQU5ORUxTIGluc3RlYWQgb2Ygc2NhbGVzW2NoYW5uZWxdIHRvIGVuc3VyZSB0aGF0IHgsIHkgY29tZSBmaXJzdCFcbiAgU0NBTEVfQ0hBTk5FTFMuZm9yRWFjaCgoY2hhbm5lbDogU2NhbGVDaGFubmVsKSA9PiB7XG4gICAgY29uc3QgbG9jYWxTY2FsZUNtcHQgPSBsb2NhbFNjYWxlQ29tcG9uZW50c1tjaGFubmVsXTtcbiAgICBpZiAoIWxvY2FsU2NhbGVDbXB0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IG1lcmdlZFNjYWxlQ21wdCA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KGNoYW5uZWwpO1xuXG5cbiAgICBjb25zdCBzcGVjaWZpZWRTY2FsZSA9IG1vZGVsLnNwZWNpZmllZFNjYWxlc1tjaGFubmVsXTtcbiAgICBjb25zdCBmaWVsZERlZiA9IG1vZGVsLmZpZWxkRGVmKGNoYW5uZWwpO1xuXG4gICAgLy8gUmVhZCBpZiB0aGVyZSBpcyBhIHNwZWNpZmllZCB3aWR0aC9oZWlnaHRcbiAgICBjb25zdCBzaXplVHlwZSA9IGNoYW5uZWwgPT09ICd4JyA/ICd3aWR0aCcgOiBjaGFubmVsID09PSAneScgPyAnaGVpZ2h0JyA6IHVuZGVmaW5lZDtcbiAgICBsZXQgc2l6ZVNwZWNpZmllZCA9IHNpemVUeXBlID8gISFtb2RlbC5jb21wb25lbnQubGF5b3V0U2l6ZS5nZXQoc2l6ZVR5cGUpIDogdW5kZWZpbmVkO1xuXG4gICAgY29uc3Qgc2NhbGVUeXBlID0gbWVyZ2VkU2NhbGVDbXB0LmdldCgndHlwZScpO1xuXG4gICAgLy8gaWYgYXV0b3NpemUgaXMgZml0LCBzaXplIGNhbm5vdCBiZSBkYXRhIGRyaXZlblxuICAgIGNvbnN0IHJhbmdlU3RlcCA9IHV0aWwuY29udGFpbnMoWydwb2ludCcsICdiYW5kJ10sIHNjYWxlVHlwZSkgfHwgISFzcGVjaWZpZWRTY2FsZS5yYW5nZVN0ZXA7XG4gICAgaWYgKHNpemVUeXBlICYmIG1vZGVsLmZpdCAmJiAhc2l6ZVNwZWNpZmllZCAmJiByYW5nZVN0ZXApIHtcbiAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLkNBTk5PVF9GSVhfUkFOR0VfU1RFUF9XSVRIX0ZJVCk7XG4gICAgICBzaXplU3BlY2lmaWVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCB4eVJhbmdlU3RlcHMgPSBnZXRYWVJhbmdlU3RlcChtb2RlbCk7XG5cbiAgICBjb25zdCByYW5nZVdpdGhFeHBsaWNpdCA9IHBhcnNlUmFuZ2VGb3JDaGFubmVsKFxuICAgICAgY2hhbm5lbCwgc2NhbGVUeXBlLCBmaWVsZERlZi50eXBlLCBzcGVjaWZpZWRTY2FsZSwgbW9kZWwuY29uZmlnLFxuICAgICAgbG9jYWxTY2FsZUNtcHQuZ2V0KCd6ZXJvJyksIG1vZGVsLm1hcmsoKSwgc2l6ZVNwZWNpZmllZCwgbW9kZWwuZ2V0TmFtZShzaXplVHlwZSksIHh5UmFuZ2VTdGVwc1xuICAgICk7XG5cbiAgICBsb2NhbFNjYWxlQ21wdC5zZXRXaXRoRXhwbGljaXQoJ3JhbmdlJywgcmFuZ2VXaXRoRXhwbGljaXQpO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gZ2V0WFlSYW5nZVN0ZXAobW9kZWw6IFVuaXRNb2RlbCkge1xuICBjb25zdCB4eVJhbmdlU3RlcHM6IG51bWJlcltdID0gW107XG5cbiAgY29uc3QgeFNjYWxlID0gbW9kZWwuZ2V0U2NhbGVDb21wb25lbnQoJ3gnKTtcbiAgY29uc3QgeFJhbmdlID0geFNjYWxlICYmIHhTY2FsZS5nZXQoJ3JhbmdlJyk7XG4gIGlmICh4UmFuZ2UgJiYgaXNWZ1JhbmdlU3RlcCh4UmFuZ2UpICYmIGlzTnVtYmVyKHhSYW5nZS5zdGVwKSkge1xuICAgIHh5UmFuZ2VTdGVwcy5wdXNoKHhSYW5nZS5zdGVwKTtcbiAgfVxuXG4gIGNvbnN0IHlTY2FsZSA9IG1vZGVsLmdldFNjYWxlQ29tcG9uZW50KCd5Jyk7XG4gIGNvbnN0IHlSYW5nZSA9IHlTY2FsZSAmJiB5U2NhbGUuZ2V0KCdyYW5nZScpO1xuICBpZiAoeVJhbmdlICYmIGlzVmdSYW5nZVN0ZXAoeVJhbmdlKSAmJiBpc051bWJlcih5UmFuZ2Uuc3RlcCkpIHtcbiAgICB4eVJhbmdlU3RlcHMucHVzaCh5UmFuZ2Uuc3RlcCk7XG4gIH1cblxuICByZXR1cm4geHlSYW5nZVN0ZXBzO1xufVxuXG4vKipcbiAqIFJldHVybiBtaXhpbnMgdGhhdCBpbmNsdWRlcyBvbmUgb2YgdGhlIHJhbmdlIHByb3BlcnRpZXMgKHJhbmdlLCByYW5nZVN0ZXAsIHNjaGVtZSkuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVJhbmdlRm9yQ2hhbm5lbChcbiAgICBjaGFubmVsOiBDaGFubmVsLCBzY2FsZVR5cGU6IFNjYWxlVHlwZSwgdHlwZTogVHlwZSwgc3BlY2lmaWVkU2NhbGU6IFNjYWxlLCBjb25maWc6IENvbmZpZyxcbiAgICB6ZXJvOiBib29sZWFuLCBtYXJrOiBNYXJrLCBzaXplU3BlY2lmaWVkOiBib29sZWFuLCBzaXplU2lnbmFsOiBzdHJpbmcsIHh5UmFuZ2VTdGVwczogbnVtYmVyW11cbiAgKTogRXhwbGljaXQ8VmdSYW5nZT4ge1xuXG4gIGNvbnN0IG5vUmFuZ2VTdGVwID0gc2l6ZVNwZWNpZmllZCB8fCBzcGVjaWZpZWRTY2FsZS5yYW5nZVN0ZXAgPT09IG51bGw7XG5cbiAgLy8gQ2hlY2sgaWYgYW55IG9mIHRoZSByYW5nZSBwcm9wZXJ0aWVzIGlzIHNwZWNpZmllZC5cbiAgLy8gSWYgc28sIGNoZWNrIGlmIGl0IGlzIGNvbXBhdGlibGUgYW5kIG1ha2Ugc3VyZSB0aGF0IHdlIG9ubHkgb3V0cHV0IG9uZSBvZiB0aGUgcHJvcGVydGllc1xuICBmb3IgKGNvbnN0IHByb3BlcnR5IG9mIFJBTkdFX1BST1BFUlRJRVMpIHtcbiAgICBpZiAoc3BlY2lmaWVkU2NhbGVbcHJvcGVydHldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHN1cHBvcnRlZEJ5U2NhbGVUeXBlID0gc2NhbGVUeXBlU3VwcG9ydFByb3BlcnR5KHNjYWxlVHlwZSwgcHJvcGVydHkpO1xuICAgICAgY29uc3QgY2hhbm5lbEluY29tcGF0YWJpbGl0eSA9IGNoYW5uZWxTY2FsZVByb3BlcnR5SW5jb21wYXRhYmlsaXR5KGNoYW5uZWwsIHByb3BlcnR5KTtcbiAgICAgIGlmICghc3VwcG9ydGVkQnlTY2FsZVR5cGUpIHtcbiAgICAgICAgbG9nLndhcm4obG9nLm1lc3NhZ2Uuc2NhbGVQcm9wZXJ0eU5vdFdvcmtXaXRoU2NhbGVUeXBlKHNjYWxlVHlwZSwgcHJvcGVydHksIGNoYW5uZWwpKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hhbm5lbEluY29tcGF0YWJpbGl0eSkgeyAvLyBjaGFubmVsXG4gICAgICAgIGxvZy53YXJuKGNoYW5uZWxJbmNvbXBhdGFiaWxpdHkpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3dpdGNoIChwcm9wZXJ0eSkge1xuICAgICAgICAgIGNhc2UgJ3JhbmdlJzpcbiAgICAgICAgICAgIHJldHVybiBtYWtlRXhwbGljaXQoc3BlY2lmaWVkU2NhbGVbcHJvcGVydHldKTtcbiAgICAgICAgICBjYXNlICdzY2hlbWUnOlxuICAgICAgICAgICAgcmV0dXJuIG1ha2VFeHBsaWNpdChwYXJzZVNjaGVtZShzcGVjaWZpZWRTY2FsZVtwcm9wZXJ0eV0pKTtcbiAgICAgICAgICBjYXNlICdyYW5nZVN0ZXAnOlxuICAgICAgICAgICAgY29uc3QgcmFuZ2VTdGVwID0gc3BlY2lmaWVkU2NhbGVbcHJvcGVydHldO1xuICAgICAgICAgICAgaWYgKHJhbmdlU3RlcCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICBpZiAoIXNpemVTcGVjaWZpZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZUV4cGxpY2l0KHtzdGVwOiByYW5nZVN0ZXB9KTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBJZiB0b3AtbGV2ZWwgc2l6ZSBpcyBzcGVjaWZpZWQsIHdlIGlnbm9yZSBzcGVjaWZpZWQgcmFuZ2VTdGVwLlxuICAgICAgICAgICAgICAgIGxvZy53YXJuKGxvZy5tZXNzYWdlLnJhbmdlU3RlcERyb3BwZWQoY2hhbm5lbCkpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1ha2VJbXBsaWNpdChcbiAgICBkZWZhdWx0UmFuZ2UoXG4gICAgICBjaGFubmVsLCBzY2FsZVR5cGUsIHR5cGUsIGNvbmZpZyxcbiAgICAgIHplcm8sIG1hcmssIHNpemVTaWduYWwsIHh5UmFuZ2VTdGVwcywgbm9SYW5nZVN0ZXBcbiAgICApXG4gICk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU2NoZW1lKHNjaGVtZTogU2NoZW1lKSB7XG4gIGlmIChpc0V4dGVuZGVkU2NoZW1lKHNjaGVtZSkpIHtcbiAgICBjb25zdCByOiBWZ1NjaGVtZSA9IHtzY2hlbWU6IHNjaGVtZS5uYW1lfTtcbiAgICBpZiAoc2NoZW1lLmNvdW50KSB7XG4gICAgICByLmNvdW50ID0gc2NoZW1lLmNvdW50O1xuICAgIH1cbiAgICBpZiAoc2NoZW1lLmV4dGVudCkge1xuICAgICAgci5leHRlbnQgPSBzY2hlbWUuZXh0ZW50O1xuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuICByZXR1cm4ge3NjaGVtZTogc2NoZW1lfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRSYW5nZShcbiAgY2hhbm5lbDogQ2hhbm5lbCwgc2NhbGVUeXBlOiBTY2FsZVR5cGUsIHR5cGU6IFR5cGUsIGNvbmZpZzogQ29uZmlnLCB6ZXJvOiBib29sZWFuLCBtYXJrOiBNYXJrLFxuICBzaXplU2lnbmFsOiBzdHJpbmcsIHh5UmFuZ2VTdGVwczogbnVtYmVyW10sIG5vUmFuZ2VTdGVwOiBib29sZWFuXG4pOiBWZ1JhbmdlIHtcbiAgc3dpdGNoIChjaGFubmVsKSB7XG4gICAgY2FzZSBYOlxuICAgIGNhc2UgWTpcbiAgICAgIGlmICh1dGlsLmNvbnRhaW5zKFsncG9pbnQnLCAnYmFuZCddLCBzY2FsZVR5cGUpICYmICFub1JhbmdlU3RlcCkge1xuICAgICAgICBpZiAoY2hhbm5lbCA9PT0gWCAmJiBtYXJrID09PSAndGV4dCcpIHtcbiAgICAgICAgICBpZiAoY29uZmlnLnNjYWxlLnRleHRYUmFuZ2VTdGVwKSB7XG4gICAgICAgICAgICByZXR1cm4ge3N0ZXA6IGNvbmZpZy5zY2FsZS50ZXh0WFJhbmdlU3RlcH07XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChjb25maWcuc2NhbGUucmFuZ2VTdGVwKSB7XG4gICAgICAgICAgICByZXR1cm4ge3N0ZXA6IGNvbmZpZy5zY2FsZS5yYW5nZVN0ZXB9O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBJZiByYW5nZSBzdGVwIGlzIG51bGwsIHVzZSB6ZXJvIHRvIHdpZHRoIG9yIGhlaWdodC5cbiAgICAgIC8vIE5vdGUgdGhhdCB0aGVzZSByYW5nZSBzaWduYWxzIGFyZSB0ZW1wb3JhcnlcbiAgICAgIC8vIGFzIHRoZXkgY2FuIGJlIG1lcmdlZCBhbmQgcmVuYW1lZC5cbiAgICAgIC8vIChXZSBkbyBub3QgaGF2ZSB0aGUgcmlnaHQgc2l6ZSBzaWduYWwgaGVyZSBzaW5jZSBwYXJzZUxheW91dFNpemUoKSBoYXBwZW5zIGFmdGVyIHBhcnNlU2NhbGUoKS4pXG4gICAgICAvLyBXZSB3aWxsIGxhdGVyIHJlcGxhY2UgdGhlc2UgdGVtcG9yYXJ5IG5hbWVzIHdpdGhcbiAgICAgIC8vIHRoZSBmaW5hbCBuYW1lIGluIGFzc2VtYmxlU2NhbGVSYW5nZSgpXG5cbiAgICAgIGlmIChjaGFubmVsID09PSBZICYmIGhhc0NvbnRpbnVvdXNEb21haW4oc2NhbGVUeXBlKSkge1xuICAgICAgICAvLyBGb3IgeSBjb250aW51b3VzIHNjYWxlLCB3ZSBoYXZlIHRvIHN0YXJ0IGZyb20gdGhlIGhlaWdodCBhcyB0aGUgYm90dG9tIHBhcnQgaGFzIHRoZSBtYXggdmFsdWUuXG4gICAgICAgIHJldHVybiBbe3NpZ25hbDogc2l6ZVNpZ25hbH0sIDBdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFswLCB7c2lnbmFsOiBzaXplU2lnbmFsfV07XG4gICAgICB9XG4gICAgY2FzZSBTSVpFOlxuICAgICAgLy8gVE9ETzogc3VwcG9ydCBjdXN0b20gcmFuZ2VNaW4sIHJhbmdlTWF4XG4gICAgICBjb25zdCByYW5nZU1pbiA9IHNpemVSYW5nZU1pbihtYXJrLCB6ZXJvLCBjb25maWcpO1xuICAgICAgY29uc3QgcmFuZ2VNYXggPSBzaXplUmFuZ2VNYXgobWFyaywgeHlSYW5nZVN0ZXBzLCBjb25maWcpO1xuICAgICAgcmV0dXJuIFtyYW5nZU1pbiwgcmFuZ2VNYXhdO1xuICAgIGNhc2UgU0hBUEU6XG4gICAgICByZXR1cm4gJ3N5bWJvbCc7XG4gICAgY2FzZSBDT0xPUjpcbiAgICBjYXNlIEZJTEw6XG4gICAgY2FzZSBTVFJPS0U6XG4gICAgICBpZiAoc2NhbGVUeXBlID09PSAnb3JkaW5hbCcpIHtcbiAgICAgICAgLy8gT25seSBub21pbmFsIGRhdGEgdXNlcyBvcmRpbmFsIHNjYWxlIGJ5IGRlZmF1bHRcbiAgICAgICAgcmV0dXJuIHR5cGUgPT09ICdub21pbmFsJyA/ICdjYXRlZ29yeScgOiAnb3JkaW5hbCc7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWFyayA9PT0gJ3JlY3QnIHx8IG1hcmsgPT09ICdnZW9zaGFwZScgPyAnaGVhdG1hcCcgOiAncmFtcCc7XG4gICAgY2FzZSBPUEFDSVRZOlxuICAgICAgLy8gVE9ETzogc3VwcG9ydCBjdXN0b20gcmFuZ2VNaW4sIHJhbmdlTWF4XG4gICAgICByZXR1cm4gW2NvbmZpZy5zY2FsZS5taW5PcGFjaXR5LCBjb25maWcuc2NhbGUubWF4T3BhY2l0eV07XG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IHNob3VsZCBuZXZlciByZWFjaCBoZXJlICovXG4gIHRocm93IG5ldyBFcnJvcihgU2NhbGUgcmFuZ2UgdW5kZWZpbmVkIGZvciBjaGFubmVsICR7Y2hhbm5lbH1gKTtcbn1cblxuZnVuY3Rpb24gc2l6ZVJhbmdlTWluKG1hcms6IE1hcmssIHplcm86IGJvb2xlYW4sIGNvbmZpZzogQ29uZmlnKSB7XG4gIGlmICh6ZXJvKSB7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgc3dpdGNoIChtYXJrKSB7XG4gICAgY2FzZSAnYmFyJzpcbiAgICBjYXNlICd0aWNrJzpcbiAgICAgIHJldHVybiBjb25maWcuc2NhbGUubWluQmFuZFNpemU7XG4gICAgY2FzZSAnbGluZSc6XG4gICAgY2FzZSAncnVsZSc6XG4gICAgICByZXR1cm4gY29uZmlnLnNjYWxlLm1pblN0cm9rZVdpZHRoO1xuICAgIGNhc2UgJ3RleHQnOlxuICAgICAgcmV0dXJuIGNvbmZpZy5zY2FsZS5taW5Gb250U2l6ZTtcbiAgICBjYXNlICdwb2ludCc6XG4gICAgY2FzZSAnc3F1YXJlJzpcbiAgICBjYXNlICdjaXJjbGUnOlxuICAgICAgcmV0dXJuIGNvbmZpZy5zY2FsZS5taW5TaXplO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBzaG91bGQgbmV2ZXIgcmVhY2ggaGVyZSAqL1xuICAvLyBzaXplUmFuZ2VNaW4gbm90IGltcGxlbWVudGVkIGZvciB0aGUgbWFya1xuICB0aHJvdyBuZXcgRXJyb3IobG9nLm1lc3NhZ2UuaW5jb21wYXRpYmxlQ2hhbm5lbCgnc2l6ZScsIG1hcmspKTtcbn1cblxuZnVuY3Rpb24gc2l6ZVJhbmdlTWF4KG1hcms6IE1hcmssIHh5UmFuZ2VTdGVwczogbnVtYmVyW10sIGNvbmZpZzogQ29uZmlnKSB7XG4gIGNvbnN0IHNjYWxlQ29uZmlnID0gY29uZmlnLnNjYWxlO1xuICAvLyBUT0RPKCMxMTY4KTogbWFrZSBtYXggc2l6ZSBzY2FsZSBiYXNlZCBvbiByYW5nZVN0ZXAgLyBvdmVyYWxsIHBsb3Qgc2l6ZVxuICBzd2l0Y2ggKG1hcmspIHtcbiAgICBjYXNlICdiYXInOlxuICAgIGNhc2UgJ3RpY2snOlxuICAgICAgaWYgKGNvbmZpZy5zY2FsZS5tYXhCYW5kU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBjb25maWcuc2NhbGUubWF4QmFuZFNpemU7XG4gICAgICB9XG4gICAgICByZXR1cm4gbWluWFlSYW5nZVN0ZXAoeHlSYW5nZVN0ZXBzLCBjb25maWcuc2NhbGUpIC0gMTtcbiAgICBjYXNlICdsaW5lJzpcbiAgICBjYXNlICdydWxlJzpcbiAgICAgIHJldHVybiBjb25maWcuc2NhbGUubWF4U3Ryb2tlV2lkdGg7XG4gICAgY2FzZSAndGV4dCc6XG4gICAgICByZXR1cm4gY29uZmlnLnNjYWxlLm1heEZvbnRTaXplO1xuICAgIGNhc2UgJ3BvaW50JzpcbiAgICBjYXNlICdzcXVhcmUnOlxuICAgIGNhc2UgJ2NpcmNsZSc6XG4gICAgICBpZiAoY29uZmlnLnNjYWxlLm1heFNpemUpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5zY2FsZS5tYXhTaXplO1xuICAgICAgfVxuXG4gICAgICAvLyBGSVhNRSB0aGlzIGNhc2UgdG90YWxseSBzaG91bGQgYmUgcmVmYWN0b3JlZFxuICAgICAgY29uc3QgcG9pbnRTdGVwID0gbWluWFlSYW5nZVN0ZXAoeHlSYW5nZVN0ZXBzLCBzY2FsZUNvbmZpZyk7XG4gICAgICByZXR1cm4gKHBvaW50U3RlcCAtIDIpICogKHBvaW50U3RlcCAtIDIpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBzaG91bGQgbmV2ZXIgcmVhY2ggaGVyZSAqL1xuICAvLyBzaXplUmFuZ2VNYXggbm90IGltcGxlbWVudGVkIGZvciB0aGUgbWFya1xuICB0aHJvdyBuZXcgRXJyb3IobG9nLm1lc3NhZ2UuaW5jb21wYXRpYmxlQ2hhbm5lbCgnc2l6ZScsIG1hcmspKTtcbn1cblxuLyoqXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSYW5nZSBzdGVwIG9mIHggb3IgeSBvciBtaW5pbXVtIGJldHdlZW4gdGhlIHR3byBpZiBib3RoIGFyZSBvcmRpbmFsIHNjYWxlLlxuICovXG5mdW5jdGlvbiBtaW5YWVJhbmdlU3RlcCh4eVJhbmdlU3RlcHM6IG51bWJlcltdLCBzY2FsZUNvbmZpZzogU2NhbGVDb25maWcpOiBudW1iZXIge1xuICBpZiAoeHlSYW5nZVN0ZXBzLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gTWF0aC5taW4uYXBwbHkobnVsbCwgeHlSYW5nZVN0ZXBzKTtcbiAgfVxuICBpZiAoc2NhbGVDb25maWcucmFuZ2VTdGVwKSB7XG4gICAgcmV0dXJuIHNjYWxlQ29uZmlnLnJhbmdlU3RlcDtcbiAgfVxuICByZXR1cm4gMjE7IC8vIEZJWE1FOiByZS1ldmFsdWF0ZSB0aGUgZGVmYXVsdCB2YWx1ZSBoZXJlLlxufVxuIl19","map":{"mappings":[{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":199,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":200,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":201,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":202,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":203,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":204,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":205,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":206,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":207,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":208,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":209,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":210,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":211,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":212,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":213,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":214,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":215,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":216,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":217,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":218,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":219,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":220,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":221,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":222,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":223,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":224,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":225,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":226,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":227,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":228,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":229,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":230,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":231,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":232,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/vega-lite/build/src/compile/scale/range.js","original":{"line":233,"column":0},"generated":{"line":233,"column":0}}],"sources":{"node_modules/vega-lite/build/src/compile/scale/range.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar vega_util_1 = require(\"vega-util\");\nvar channel_1 = require(\"../../channel\");\nvar log = require(\"../../log\");\nvar scale_1 = require(\"../../scale\");\nvar scale_2 = require(\"../../scale\");\nvar util = require(\"../../util\");\nvar vega_schema_1 = require(\"../../vega.schema\");\nvar model_1 = require(\"../model\");\nvar split_1 = require(\"../split\");\nvar properties_1 = require(\"./properties\");\nexports.RANGE_PROPERTIES = ['range', 'rangeStep', 'scheme'];\nfunction parseScaleRange(model) {\n    if (model_1.isUnitModel(model)) {\n        parseUnitScaleRange(model);\n    }\n    else {\n        properties_1.parseNonUnitScaleProperty(model, 'range');\n    }\n}\nexports.parseScaleRange = parseScaleRange;\nfunction parseUnitScaleRange(model) {\n    var localScaleComponents = model.component.scales;\n    // use SCALE_CHANNELS instead of scales[channel] to ensure that x, y come first!\n    channel_1.SCALE_CHANNELS.forEach(function (channel) {\n        var localScaleCmpt = localScaleComponents[channel];\n        if (!localScaleCmpt) {\n            return;\n        }\n        var mergedScaleCmpt = model.getScaleComponent(channel);\n        var specifiedScale = model.specifiedScales[channel];\n        var fieldDef = model.fieldDef(channel);\n        // Read if there is a specified width/height\n        var sizeType = channel === 'x' ? 'width' : channel === 'y' ? 'height' : undefined;\n        var sizeSpecified = sizeType ? !!model.component.layoutSize.get(sizeType) : undefined;\n        var scaleType = mergedScaleCmpt.get('type');\n        // if autosize is fit, size cannot be data driven\n        var rangeStep = util.contains(['point', 'band'], scaleType) || !!specifiedScale.rangeStep;\n        if (sizeType && model.fit && !sizeSpecified && rangeStep) {\n            log.warn(log.message.CANNOT_FIX_RANGE_STEP_WITH_FIT);\n            sizeSpecified = true;\n        }\n        var xyRangeSteps = getXYRangeStep(model);\n        var rangeWithExplicit = parseRangeForChannel(channel, scaleType, fieldDef.type, specifiedScale, model.config, localScaleCmpt.get('zero'), model.mark(), sizeSpecified, model.getName(sizeType), xyRangeSteps);\n        localScaleCmpt.setWithExplicit('range', rangeWithExplicit);\n    });\n}\nfunction getXYRangeStep(model) {\n    var xyRangeSteps = [];\n    var xScale = model.getScaleComponent('x');\n    var xRange = xScale && xScale.get('range');\n    if (xRange && vega_schema_1.isVgRangeStep(xRange) && vega_util_1.isNumber(xRange.step)) {\n        xyRangeSteps.push(xRange.step);\n    }\n    var yScale = model.getScaleComponent('y');\n    var yRange = yScale && yScale.get('range');\n    if (yRange && vega_schema_1.isVgRangeStep(yRange) && vega_util_1.isNumber(yRange.step)) {\n        xyRangeSteps.push(yRange.step);\n    }\n    return xyRangeSteps;\n}\n/**\n * Return mixins that includes one of the range properties (range, rangeStep, scheme).\n */\nfunction parseRangeForChannel(channel, scaleType, type, specifiedScale, config, zero, mark, sizeSpecified, sizeSignal, xyRangeSteps) {\n    var noRangeStep = sizeSpecified || specifiedScale.rangeStep === null;\n    // Check if any of the range properties is specified.\n    // If so, check if it is compatible and make sure that we only output one of the properties\n    for (var _i = 0, RANGE_PROPERTIES_1 = exports.RANGE_PROPERTIES; _i < RANGE_PROPERTIES_1.length; _i++) {\n        var property = RANGE_PROPERTIES_1[_i];\n        if (specifiedScale[property] !== undefined) {\n            var supportedByScaleType = scale_1.scaleTypeSupportProperty(scaleType, property);\n            var channelIncompatability = scale_1.channelScalePropertyIncompatability(channel, property);\n            if (!supportedByScaleType) {\n                log.warn(log.message.scalePropertyNotWorkWithScaleType(scaleType, property, channel));\n            }\n            else if (channelIncompatability) {\n                log.warn(channelIncompatability);\n            }\n            else {\n                switch (property) {\n                    case 'range':\n                        return split_1.makeExplicit(specifiedScale[property]);\n                    case 'scheme':\n                        return split_1.makeExplicit(parseScheme(specifiedScale[property]));\n                    case 'rangeStep':\n                        var rangeStep = specifiedScale[property];\n                        if (rangeStep !== null) {\n                            if (!sizeSpecified) {\n                                return split_1.makeExplicit({ step: rangeStep });\n                            }\n                            else {\n                                // If top-level size is specified, we ignore specified rangeStep.\n                                log.warn(log.message.rangeStepDropped(channel));\n                            }\n                        }\n                }\n            }\n        }\n    }\n    return split_1.makeImplicit(defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep));\n}\nexports.parseRangeForChannel = parseRangeForChannel;\nfunction parseScheme(scheme) {\n    if (scale_1.isExtendedScheme(scheme)) {\n        var r = { scheme: scheme.name };\n        if (scheme.count) {\n            r.count = scheme.count;\n        }\n        if (scheme.extent) {\n            r.extent = scheme.extent;\n        }\n        return r;\n    }\n    return { scheme: scheme };\n}\nfunction defaultRange(channel, scaleType, type, config, zero, mark, sizeSignal, xyRangeSteps, noRangeStep) {\n    switch (channel) {\n        case channel_1.X:\n        case channel_1.Y:\n            if (util.contains(['point', 'band'], scaleType) && !noRangeStep) {\n                if (channel === channel_1.X && mark === 'text') {\n                    if (config.scale.textXRangeStep) {\n                        return { step: config.scale.textXRangeStep };\n                    }\n                }\n                else {\n                    if (config.scale.rangeStep) {\n                        return { step: config.scale.rangeStep };\n                    }\n                }\n            }\n            // If range step is null, use zero to width or height.\n            // Note that these range signals are temporary\n            // as they can be merged and renamed.\n            // (We do not have the right size signal here since parseLayoutSize() happens after parseScale().)\n            // We will later replace these temporary names with\n            // the final name in assembleScaleRange()\n            if (channel === channel_1.Y && scale_2.hasContinuousDomain(scaleType)) {\n                // For y continuous scale, we have to start from the height as the bottom part has the max value.\n                return [{ signal: sizeSignal }, 0];\n            }\n            else {\n                return [0, { signal: sizeSignal }];\n            }\n        case channel_1.SIZE:\n            // TODO: support custom rangeMin, rangeMax\n            var rangeMin = sizeRangeMin(mark, zero, config);\n            var rangeMax = sizeRangeMax(mark, xyRangeSteps, config);\n            return [rangeMin, rangeMax];\n        case channel_1.SHAPE:\n            return 'symbol';\n        case channel_1.COLOR:\n        case channel_1.FILL:\n        case channel_1.STROKE:\n            if (scaleType === 'ordinal') {\n                // Only nominal data uses ordinal scale by default\n                return type === 'nominal' ? 'category' : 'ordinal';\n            }\n            return mark === 'rect' || mark === 'geoshape' ? 'heatmap' : 'ramp';\n        case channel_1.OPACITY:\n            // TODO: support custom rangeMin, rangeMax\n            return [config.scale.minOpacity, config.scale.maxOpacity];\n    }\n    /* istanbul ignore next: should never reach here */\n    throw new Error(\"Scale range undefined for channel \" + channel);\n}\nexports.defaultRange = defaultRange;\nfunction sizeRangeMin(mark, zero, config) {\n    if (zero) {\n        return 0;\n    }\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            return config.scale.minBandSize;\n        case 'line':\n        case 'rule':\n            return config.scale.minStrokeWidth;\n        case 'text':\n            return config.scale.minFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            return config.scale.minSize;\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMin not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\nfunction sizeRangeMax(mark, xyRangeSteps, config) {\n    var scaleConfig = config.scale;\n    // TODO(#1168): make max size scale based on rangeStep / overall plot size\n    switch (mark) {\n        case 'bar':\n        case 'tick':\n            if (config.scale.maxBandSize !== undefined) {\n                return config.scale.maxBandSize;\n            }\n            return minXYRangeStep(xyRangeSteps, config.scale) - 1;\n        case 'line':\n        case 'rule':\n            return config.scale.maxStrokeWidth;\n        case 'text':\n            return config.scale.maxFontSize;\n        case 'point':\n        case 'square':\n        case 'circle':\n            if (config.scale.maxSize) {\n                return config.scale.maxSize;\n            }\n            // FIXME this case totally should be refactored\n            var pointStep = minXYRangeStep(xyRangeSteps, scaleConfig);\n            return (pointStep - 2) * (pointStep - 2);\n    }\n    /* istanbul ignore next: should never reach here */\n    // sizeRangeMax not implemented for the mark\n    throw new Error(log.message.incompatibleChannel('size', mark));\n}\n/**\n * @returns {number} Range step of x or y or minimum between the two if both are ordinal scale.\n */\nfunction minXYRangeStep(xyRangeSteps, scaleConfig) {\n    if (xyRangeSteps.length > 0) {\n        return Math.min.apply(null, xyRangeSteps);\n    }\n    if (scaleConfig.rangeStep) {\n        return scaleConfig.rangeStep;\n    }\n    return 21; // FIXME: re-evaluate the default value here.\n}\n//# sourceMappingURL=data:application/json;base64,"},"lineCount":233}},"hash":"1146c894b08857677b3e07d861a90645","cacheData":{"env":{}}}